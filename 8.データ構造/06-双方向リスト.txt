双方向リスト（doubly linked list）は、連結リストの 1 つで、双方向の走査を可能にするものである。
双方向リストでは、各ノードが次のノードへの単一のポインタだけでなく、前のノードへのポインタも含んでいる。このため、リストを順方向と逆方向の両方で走査することができる。

片方向リストでは、一方向（通常、先頭から末尾まで）のみの走査が可能である。
片方向リストを逆方向にたどるには、リストの末尾からポインタをたどっていく必要があり、非常に不便。一方、双方向リストでは、適切なポインタをたどるだけで、リストをどちらの方向にもたどることができる。
双方向リストは一般に、片方向リストよりもやや複雑で、より多くのメモリを必要とする。これは、ノードごとに 1 つだけでなく 2 つのポインタを必要とするからである。しかし、双方向の探索が必要な場合などには有効になる。

インデックス

双方向リストにおいても、リスト内の要素にアクセスするには、線形探索を用いる。
時間計算量は片方向リストの時と同様に O(n) になる。

双方向リストの反転

双方向リストでは、前のノードのポインタを持っているので、リストを逆方向にアクセスすることができる。

挿入

双方向リストへの挿入も片方向リストの時と同様に、O(1) で実行することができる。
しかし、双方向リストの場合、リストの最後（末尾）にデータを追加するときは、リストの最後の部分がどこであるかを知っている必要があります。これは、双方向リストが各要素（ノード）の前後の位置情報を持っているためです。そのため、新しいデータを最後に追加した場合、その位置情報（末尾）を更新しなければなりません。

削除

双方向リストが片方向リストより優れている点は、前のポインタを持っているため、ノードの削除を O(1) で実行することができるところ。
例えば、「A」「B」「C」というノードが順番に並んでいるとき、もし「B」を取り除きたいなら、その前後の「A」と「C」をつなげるだけで OK 。これができるのは、「B」が「A」と「C」の両方に連結しているから。


通常リストを使う場合では、配列の方が汎用性が高く、高速で処理を行うことができる。
しかし、グラフ内のポインタなど、連結リストの特性を本質的に使用するアルゴリズム等、連結リストの使用が好まれるケースもある。

これ以外では、ランダムにデータにアクセスして要素を入れ替えるような時ではなく、多くの要素の挿入や削除を行う場合には連結リストを使うのが一般的。
それは連結リストが動的で、リストを容易に縮小、拡大することができるからである。





