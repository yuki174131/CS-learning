キュー（Queue）は、FIFO（First-In-First-Out）の原則に従った線形データ構造である。
これは「最初に入ったものが最初に出てくる」という規則を意味する。
たとえば、スーパーマーケットのレジの行列を想像してみる。
最初に並んだ人（データ）が最初にレジで会計（削除）される。これがキューの動作原理である。

キューは配列や連結リストなどのデータ構造を用いて実装することが可能で、
受け取ったデータをその順番に処理することが求められる多くの場面で利用される。

キューには主に次のような操作がある。

Enqueue（エンキュー）: キューの末尾に新しい要素を追加。
Dequeue（デキュー）: キューの先頭の要素を削除し、その要素を返す。

両端キュー (deque, double-ended queue) は、その名の通り、両端からデータを追加や削除できるようになったキュー。
一般的なキューでは、データは一端からしか追加できず、もう一方の端からしか削除できない。

一方で、両端キューでは、両端からデータを追加や削除することができるようになっている。
両端キューはデック（deque）と呼ばれることもある。
スタックとキューの両方の操作を行う必要がある場合に便利なデータ構造になっている。

両端キューの機能は以下になります。

EnqueueFront: リストの先頭に要素を挿入する。
EnqueueBack:リストの末尾に要素を挿入する。
DequeueFront: リストの先頭にある要素を削除して返す。
DequeueBack: リストの末尾にある要素を削除して返す。
DequeueBack を片方向リストで実装すると時間計算量が O(n) になってしまう。
末尾に prev を使って効率よくアクセスするために、双方向リストを使用する。


それでは両端キューを使って、配列の中から最大値を検索するとする。
手順は以下のようになる。

配列の中の数字を順に見ていく。
見た数字が今まで見つけた最大値よりも大きければ、その数字を新たな最大値とします。そしてその新たな最大値を両端キューの一番前（先頭）に入れる。
逆に見た数字が今まで見つけた最大値よりも小さければ、その数字を両端キューの一番後ろ（最後）に入れる。
この操作を配列の最初から最後まで繰り返す。最終的には、両端キューの一番前（先頭）には配列の中で最も大きな数字が残ることになる。

また、この手順が全体的にかかる時間は O(n) となる。これは、n を配列の要素数とした場合、要素全てを 1 回ずつ確認するため、最悪の場合でも要素数に比例した時間しかかからないという意味。
具体的には、各要素を見て、その場で最大値かどうかを確認し、両端キューに追加する操作はそれほど時間がかからないため、全体の時間は配列の要素数にほぼ等しくなる。

与えられた配列と整数 k に対して、サイズ k の連続する部分配列の中で最大の値を見つける問題を解いてみる。
例えば、入力として arr = [1, 2, 3, 1, 4, 5, 2, 3, 6], k = 3 を考えてみる。

この場合、サイズ 3 の連続する部分配列の最大値を求める必要がある。具体的な処理手順は次の通りです。
最初の 3 つの要素で構成される部分配列 [1, 2, 3] を考えます。最大値は 3。
次に、配列を 1 つずつスライドさせて次の部分配列 [2, 3, 1] を取得します。最大値は 3。
同様に、次の部分配列 [3, 1, 4] の最大値は 4。
これを繰り返していき、部分配列 [1, 4, 5] の最大値は 5、[4, 5, 2] の最大値は 5、[5, 2, 3] の最大値は 5、[2, 3, 6] の最大値は 6 となる。
このようにして、サイズ k の連続する部分配列の最大値を求めることができる。

両端キューを使うことで、この問題を効率的に O(n) で解決することができる。
このアルゴリズムでは、スライディングウィンドウと呼ばれる手法が使用される。スライディングウィンドウはよく使われるアルゴリズムの一つである。


スライディングウィンドウ
サイズ 4 のウィンドウを配列の中で 1 つずつ右側にずらし、ウィンドウの中での最大値を求めることを考えてみる。
このウィンドウ内で最大の値を見つけるのが目的である。そのため、新しくウィンドウに入ってきた値が、既存の値より大きい場合、
その既存の値はもう二度と最大値になることはない。なぜなら、ウィンドウが右に移動するため、新しく入ってきた大きな値がウィンドウから出る前に、既存の小さな値がウィンドウから出てしまうからである。

したがって、新しくウィンドウに入ってきた値が既存の値より大きい場合、その小さい値はウィンドウから取り除く。
そうすることで、ウィンドウの左端には常に現在のウィンドウ内で最大の値が存在する。

これを利用すると、ウィンドウを右にスライドさせるごとに、ウィンドウ内の最大値をリストに追加していくことができる。
