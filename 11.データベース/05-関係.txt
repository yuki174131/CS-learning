関係モデルの語源は、関係代数（relational algebra）という用語に由来している。
関係と呼ばれるデータの集合を定義し、関係を入出力とする関数を定義する数学理論のことを関係代数という。これらの関数を使うと、関係を入力として取り込み、述語と一定の操作を行うことによって、関係を変換することができる。
https://gyazo.com/5d96606b1b3d729a64396b31de379ea6

リレーショナルデータベースは、関係モデルを用いてデータを論理的に整理しており、DML のクエリコマンドは関係代数で定義された関数から派生したものになる。
関係とは、同じサイズのタプルの集合であり、タプル内の各位置は属性によって定義される。関係は一般的にテーブル（table）とも呼ばれている。

タプル（tuple）とは、固定サイズのデータのリストを指します。タプルは通常、n-タプルと呼ばれ、n はリストの長さを表す。
つまり、タプルの固定サイズが 3 であれば 3 タプル、固定長が 8 であれば 8 タプルという。同じデータ型のエントリが要求される固定サイズの配列とは異なり、タプルの要素は必ずしも同じデータ型である必要はない。
関係には x 個のタプルが含まれており、データエントリやテーブルの行（row）と呼ばれる。

属性（attribute）とは、タプル内の位置を特定するもので、データ型や定義域などのプロパティを定義する。定義域（domain）とは、許容される値の集合を指し、例えば、unsigned intsの定義域は、全ての正の整数になる。
属性はタプルのインデックスやテーブルの列（column）と呼ばれる。

関係スキーマ（relation schema）は、関係の設計と構造を定義する一方、関係インスタンス（relation instance）は、任意の時点での関係の全てのタプルのことを指す。
リレーショナルデータベースシステムでは、属性に対してデータ型の集合が提供され、これらの属性の定義域は、制約（constraint）と呼ばれるものによって、さらに絞ることができる。



参照関係

関係の中で、キー（key）とは、関係内のタプルを一意に識別するために使用される、属性または属性の集合のことを指す。
キーを使うことで、関係内のデータにアクセスしたり、他の関係のデータを参照することができる。キーはタプルを識別するための識別子であり、ルックアップテーブルで使用されるキーと同様に扱うことができる。

関係は結局のところテーブルであるため、キーに適切なインデックスが付けられ、関係が上手く設計されていれば、コンピュータはキーを使って O(logn)やO(1)の速度でデータを見つけることができる。
関係の数学的な定義に戻ると、関係とはタプルの集合であり、全く同じ属性値を持つタプルは存在しない。これはタプルの全ての属性をスーパーキーとして使い、タプルを識別することができることを意味する。
スーパーキー（super key）とは、関係内でタプルを一意に識別することができる任意のキーです。タプルの全ての属性は、タプルを識別することができるので、定義上はスーパーキーになる。
https://gyazo.com/24b914bd1266d3898771b8d2c13758c9

タプルの識別に最も好ましいものとして、設計者や開発者にとって選択される候補キーを主キー（primary key）という。関係に存在する候補キーが 1 つしかない場合、その候補キーは主キーとなる。
一般的にデータベース設計者は任意の属性として id 属性を割り当てます。id はほとんどの場合、0 を除く正の整数として設定されるため、
要素にアクセスするための配列のインデックスとして使うことができる。この id 属性は主キーとしても使用される。

前述の通り、キーはタプルを一意に識別するものでなければならない。これは、2 つのタプルが A 属性内で同じ値を持つことができないことを意味する。
実際のリレーショナルデータベース内では、テーブルスキーマの定義で指定することで、同一の値が保存されないよう一意制約を強制する整合性のチェックが実装されることもある。
候補キーに含まれない全ての属性は、非キー属性（non-key attribute）と呼ばれる。

Webコンテンツを管理する CMS（Content Management System）のスキーマを、関係モデルを用いて設計してみる。

ユーザーを区別するために「Type」と呼ばれる別の属性を追加する。この CMS ではユーザーとして、特別なコンテンツを見ることができる subscriber、新しいページを作成する editor、CMS を管理する admin がある。
https://gyazo.com/fa90a0382b67b69d6bd206c494bbf537
ユーザーの主キーとして、候補キーの username または email の中から 1 つ選択することができる。しかしここでは、タプルを識別するため一意の正の整数として user_id という別の属性を追加する。
https://gyazo.com/47aa28e5a4cec155e4f3b32bd6e2c1aa
https://gyazo.com/7ec96e7802ed93f3bd719551e8c27e0f

次に、title、description、content（HTML の文字列）、url、authorなど、ウェブページに関する情報を格納する pages 関係を作成する。
作成する CMS では、admin と editor のユーザーが新しいページを作成できるようになっており、ページを作成したこれらのユーザーが、そのページの author となる。

この pages 関係に対して、ユーザーに関する情報、つまり username、email、date of birth、type 等の属性をページに追加する必要はない。
それはユーザーを一意に識別する主キーの値さえあれば、各ユーザーの情報を全て含むタプルを users 関係から取得することができるからである。

これは参照（referencing）と呼ばれる。メモリアドレスがメモリブロックに物理的に格納されている値への参照であるのと同様に、キー値は特定の関係からのタプルへの参照として使用することができる。
以下は、author_id を外部キーとした pages 関係のインスタンス。
https://gyazo.com/42bfb5293d8beb695fcd9d509208904d

上記の関係から、page_id が 1 のタプルの author は email が tommy434@example.com、username が tommy434、type が admin のユーザーであることがわかる。
この情報を把握できるのは、外部キーである author_id のおかげである。外部キー（foreign key）とは、関係 R1 の属性 A の集合であり、関係 R2 の主キーを指す。
つまり、R1 の外部キー A は、主キー B を持つ R2 のタプルを参照している。R1 は参照関係（referencing relation）、R2 は被参照関係（referenced relation）と呼ばれる。
https://gyazo.com/0287e2b522c65922948f7e22997521f4

外部キーとして宣言された属性は、外部キー制約を持つ必要があります。この制約とは、外部キーの値 F を持つ R1 のタプル A が存在するためには、F と同じ値を主キーの値とするタプル B が R2 内に存在しなければならないということを指します。

データベースシステムは、外部キーが正しいことを確認するために整合性チェックを行う。外部キー制約が主キーに結びついているのに対し、より緩いバージョンとして参照整合性制約（referential integrity constraint）がある。
これは、一連の属性 C の値が、C が参照する関係内のタプルに存在するかどうかを検証するもの。

