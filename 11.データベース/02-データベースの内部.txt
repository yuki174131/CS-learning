クエリプロセッサ（query processor）モジュールは、データベース言語を解釈し、低階層の命令にコンパイルする役割を担っている。
データベース言語とは、データベースシステム内で使用可能な、データベースを操作するための言語を指す。
ほとんどのリレーショナルデータベースでは、SQL 言語（structured query language）が採用されている。

データベース言語は、データ定義言語 DDL（data-definition language）、データ操作言語 DML（data-manipulation language）の 2 つの独立したサブ言語から構成されている。
SQL のように 1 つの言語で DDL と DML の両方を扱う場合がほとんどである。DDL は、データベースのスキーマを定義する役割を担っている。
データベースのスキーマ（schema）とは、保存されているデータの集合体に紐付けられる全ての規則のことを指す。

https://gyazo.com/2017ad9b82949e8d1aacdd0ce0282a89

スキーマには、格納するデータ型、使用する物理的データ構造（上級ユーザー向け）、データエントリの整合性と制約、および承認ルールの宣言が含まれる。
つまり、スキーマはどのようなデータをデータベースに入れることができるか、どのようにデータベースに保存するか、誰がデータベースにデータを保存したり読み出したりできるかを決定する。
これらのルールや設定は全て、データベース自身だけがアクセスできるメタデータを持つデータ辞書（data dictionary）に含まれる。

SQL のような言語では、DDL コマンドには CREATE args コマンドと DELETE args コマンドがあり、テーブル、ユーザー、ビュー、インデックス、その他多くのアイテムを作成/削除することができる。
一方、DML を使うとデータベースのユーザーが保存されているデータを追加、アクセス、操作することができる。
これは、データの読み取りにつながるクエリ、つまりトランザクションを通じて行われる。他の永続的なストレージと同様に、CRUD の頭文字を使って利用可能な操作を説明する。
- Create new data（新しいデータの作成）
- Read available data（利用可能なデータの読み取り）
- Update available data（利用可能なデータの更新）
- Delete available data（利用可能なデータの削除）

データベースの設計をスキーマと呼ぶのに対し、ある特定の時点でのシステム内に存在する実際のデータをインスタンス（instance）という。
プログラミング、特に OOP の観点からは、スキーマは「クラスの設計図」、データベースのインスタンスは「ある時点で特定の状態にあるオブジェクト（クラスのインスタンス）」と考えることができる。
例えば、バックアップを作成する際には、その時点でのスキーマ（構造）とデータベースのインスタンスがエクスポートされる。

クエリプロセッサモジュールの中には、DDL 文を実行し、それに応じてデータ辞書を更新する DDL インタープリタ（DDL interpreter）と、クエリを最適化し、さらに低階層の命令に変換して、クエリ評価エンジンで処理する DML コンパイラ（DML compiler）がある。
https://gyazo.com/e61787df7cb6388cf99b05e3af2bff5f


ストレージマネージャは、オペレーティングシステムの低階層 I/O API（Input/Output API）と通信することで、データをコンピュータ内のファイルとして保存する役割を果たす。
ストレージマネージャは、データ辞書にアクセスしてデータベース管理者が微調整したデータベースの構造を把握し、整合性と権限のチェックを行うことができる。

ストレージマネージャは、データに素早くアクセスできるルックアップテーブルのように、インデックスのセットを管理することができる。
インデックスは通常、平衡二分探索木として実装されます。特に B 木や R 木は、ディスクメモリ効率が良いだけでなく、ルックアップが O（logn）と非常に高速で、O（n）の順序付き走査のような利点を備えている。

データを保存し、CRUD クエリを処理する場合、ストレージマネージャは多くのことを処理しなければならない。これらの責任は、さらにマネージャ内の他のコンポーネントに委ねられる。

Authorization manager
ユーザーがデータにアクセスする権限を持っているかどうかを、データベースのデータ辞書を参照してチェックする。

Integrity manager
状態の変更がスキーマで指定された制約と参照の整合性に従うかどうかをチェックする。

File manager
ディスクストレージ内のデータの構造を決定し、ディスクストレージ内のデータの割り当てを行う。

Buffer manager
メインメモリーに何をキャッシュするかを決定し、ディスクからメインメモリーへのデータの取り込みを行う。

Transaction manager
データベースのトランザクション内で必要な手続きを行う。これには、同時実行時の一貫性の維持、ロールバックの仕組み、原子性のルールの適用等が含まれる。
リレーショナルデータベースでは、ACID （原子性、一貫性、独立性、永続性） ルールが適用される。


データベースシステム内では、データは 3 つの異なる階層で抽象化される。抽象化によって、各階層がそれぞれ独立して存在することができる。
つまり、物理層内部の複雑度を理解しなくても、論理層で作業を実行することができる。（ほとんどの場合、私たちは論理層で作業を行う）
https://gyazo.com/d2a0e7e4596250943c06d2d325b79bf6

物理層（physical level）

データが物理的にどのように保存されるかを決定する。
- データ型は何バイトか？
- ファイル内の記号を解析する際、区切り文字は必要か？
- 使用すべきデータ構造は何か？
- 何をどのような方法でインデックス化するか？

論理層（logical level）

スキーマ設計のように、データベースが高階層でどのように構成されているかを表す
- テーブル（データ集）にはどのようなデータ型を束ねるべきか？
- 制約や整合性のルールは何か？
- 他のテーブルのキーなど、参照すべきものはあるか（外部キー等）？
- データベース全体のデータ関係はどうなっているか？

外部層（view level）

データベースの一部分のみを表す。外部層はデータベース管理者が設定するもので、セキュリティ上の目的や複雑度を軽減するためのもの。
アプリケーションの一部や開発者は、大規模なアプリケーションのデータベース設計全体のうち、ごく一部だけを知っていれば問題ない。