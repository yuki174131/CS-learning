ソフトウェアを作成する際、要求事項をよく吟味して、高い階層を持つデータモデルを作成することが推奨される。
どのようなデータが保存され、どのように処理されるのかを大まかに把握しておけば、ソフトウェアのニーズに合わせてデータベースを作り始めることができる。

データベース設計者は、ソフトウェア設計チームや専門家と直接連携して、ソフトウェアの範囲を事前に十分に把握し、そのニーズに基づいてスキーマを設計する必要がある。
DBMS には DDL コマンドでスキーマを更新できる柔軟性があり、データを自由に操作することができるので、アジャイルチームには欠かせないものとなっている。

データベーススキーマを設計した後は、データモデルを選択することになる。データモデルは、どのような概念を適用すべきか、また要件をデータベースモデルに適合する設計にどのように変換するかを決定する。
設計段階では、特定の低階層や物理層のプロパティではなく、まず論理層に焦点を当てることが重要。

データベースシステムの中には、4 つの主要なデータベースモデルがあります。データベースモデル（database model）とは、データベースに共通して適用されるデータモデルで、データの論理構造や、データの整理・保存・操作の方法を決定するもの。
データベースモデルでは、保存されたデータについて特殊な方法で考える必要がある。

関係モデル（relational model）は、データと関係をテーブルで表現する。
テーブルはリレーションと呼ばれ、データエントリを表すタプルと呼ばれる行と、タプルの要素がどのようなデータタイプであるかを指定する属性と呼ばれる列を含んでいる。行のエントリ形式は、テーブル内では常に固定されている。

リレーショナルデータベース（relational database）は、関係モデルを用いてデータを構造化するデータベースに与えられる名称。
リレーショナルデータベースは、最も広く使用されている種類のデータベースで、構造と豊富な機能を備えており、ACID の特徴を保証していることが最大の売りとなる。

実体関連データモデル（entity-relationship data model）は、エンティティと呼ばれる基本的なオブジェクトの集合体を使用し、エンティティ間の関係を記述する。
ER 図は、現実世界やビジネスの観点からデータを見てオブジェクトを互いに区別し、関係を指定するために使用されます。ER 図を使うと、データベースの設計がしやすくなったり、設計をスキーマへ変換やすくなる。

半構造化データモデル（semi-structured data model）とは、同じデータ型のエントリが異なる属性のセットを持つことができるデータモデルのことを指す。
これは、スキーマで指定された固定のカラム（属性）を強制する関係モデルとは異なる。
データはさまざまな方法で表現できますが、XML と JSON による表現が最も一般的。半構造化データモデルを採用したデータベースでは、key value ペアが重要な役割を果たす。リレーショナルデータベースではないデータベースは半構造化データモデルに該当し、NoSQL データベースと呼ばれることもある。
これらのデータベースは構造を持たないため、ACID の特徴は保証されない。

リレーショナルデータベースと NoSQL データベースの読み取り速度は同じですが、NoSQL データベースの方が書き込み効率が高いため、ACID の特徴を犠牲にしてでも、拡張性の高いソフトウェアに頻繁に使用される傾向にある。
このようなデータベースシステムには、redis、mongodb、cassandra などがある。


オブジェクトモデル（object model）とは、オブジェクト指向プログラミングにおいて、データをオブジェクトになぞらえてモデル化したデータモデルのことを指す。
これは要するに、スキーマがクラスの設計図に近い役割を果たし、データエントリはある時点でのオブジェクトの状態であることを意味する。
データエントリを読み込んでプログラミング言語にロードすることで、オブジェクトを再作成することができる。

オブジェクトモデルのデータには、リレーショナルデータベースが最も一般的に使用されますが、オブジェクトモデルのニーズを満たす特定のデータベースもある。
また、ORM（Object Relational Mapping）のように、データベースのエントリをマッピングし、実行時のオブジェクトに変換するツールもあります。