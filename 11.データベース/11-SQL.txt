集計関数

値の集まりに対して計算を実行し、1 つの値を返す DBMS 組み込みの関数。MySQL には、以下のような集計関数がある
- MAX(column_name)	値の集まりの中で最大値を返す
- MIN(column_name)	値の集まりの中で最小値を返す
- AVG(column_name)	値の集まりの平均値を返す
- SUM(column_name)	値の集まりの合計値を返す
- COUNT(column_name or *)	値の集まりの個数を返す

※Count(*) を除いて NULL 値は無視される。

SELECT MAX(age) FROM users;
→MAX or MIN使用時の例

SELECT AVG(age) FROM users;
→AVG使用例

SELECT SUM(age) FROM users;
→SUM使用例

SELECT COUNT(*) FROM users;
→COUNT使用例
- COUNT(*): 全行数を取得
- COUNT(column_name): column_name の値が NULL ではない行数を取得

SELECT column_name AS display_name FROM table_name;
→表示カラム名はASを使用して指定する。

SELECT prefecture AS 都道府県, AVG(age) AS 平均年齢 FROM users WHERE prefecture = '東京都';
→東京都の平均年齢を出力する時の例

※バックエンドサーバとは、一般的には、データベースと通信してデータの処理を行うサーバを指す。
データベースと通信する際に、正しい名前でバックエンドサーバへデータを受け渡すことは重要。


GROUP BY

各レコードをグループ化し、各グループごとに集計関数を実行するには、GROUP BY を使用する。

SELECT prefecture AS 都道府県, AVG(age) AS 平均年齢 FROM users GROUP BY prefecture;
→各都道府県ごとの平均年齢を取得したい場合

WHERE 句と組み合わせて使うこともできる

SELECT prefecture AS 都道府県, AVG(age) AS 平均年齢 FROM users WHERE prefecture IN ('大阪府', '東京都') GROUP BY prefecture;
→大阪と東京の平均年齢を取得

各句は、この順番でないとエラーになる。上記のクエリは、以下の順序で処理が行われている。

- WHERE 句で、大阪府、東京都のレコードだけに絞り込む。
- 残ったレコードを、都道府県ごとにグループ化する。
- 各グループで、年齢の平均値を取得する。
- SELECT 句で各グループのレコードをまとめて表示する。

GROUP BY句では、複数のカラムを指定してグループ化することもできる。

SELECT address , age FROM teachers GROUP BY address ,age ;

SELECT句で指定するカラム名がGROUP BY句と異なっていると、意図したグループ化ができない。


HAVING

HAVING は、GROUP BY でグループ化した後のそれぞれの仮想テーブルに対して、絞り込みを実行する。

SELECT prefecture AS 都道府県, AVG(age) AS 平均年齢 FROM users WHERE prefecture IN ('大阪府', '東京都') GROUP BY prefecture HAVING AVG(age) <= 20;
→平均年齢が 20 歳以下の都道府県のみを取得するといったことが可能になる

WHERE の時点では、テーブルはまだグループ化されていない。従って、この時点で集計関数を使った AVG(age) <= 20 のような絞り込みを行うことはできない。
このように、グループ化された後の各仮想テーブルに対して絞り込みを行いたい場合に使用するのが、HAVING 句。
HAVING 句を使えば、AVG の処理を実施した後に、絞り込みを実施することができる。


CASE

CASEはWHENと合わせて使用し、条件分岐を行なうために用る。他のプログラム言語でいうif, elseと同様の役割があり、データごとに指定した条件に合致するかどうかを判定する。
CASE式は条件に応じて出力結果を変えられる。

SELECT
  pr.*,
  CASE WHEN unit_cost < 500 THEN 'low'
       WHEN unit_cost < 1000 THEN 'middle'
       ELSE 'high'
  END AS lank
FROM product AS pr


例
アパレルの店舗では日々仕入れを行なっており、それを仕入れ管理システムで管理している。
warehouse テーブルには仕入れデータが入っている。冬の 12 - 3 月のデータを対象に以下を計算する。
商品 ID、倉庫 ID、年、月ごとの仕入れ数(all_count) を取得する。出力カラムは、商品 ID(product_id)、倉庫 ID(warehouse_id)、仕入れ年月(stock_year_month), 仕入れ数(all_count)。
stock_year_month(降), warehouse_id(昇), product_id(昇)の順にする。
stock_year_month 文字列には、SQLite の連結演算子「||」と CASE 条件式を使用。
https://gyazo.com/1ebb4ab6c4b2c82f04974cecfa7dfda5

SELECT
    product_id,
    warehouse_id,
    CASE WHEN month in (10, 11, 12) THEN year || '-' || month
        ELSE year || '-0' || month
    END AS stock_year_month,
    COUNT(id)
FROM
    warehouse
WHERE
    month IN (12, 1, 2, 3)
GROUP BY
    product_id,
    warehouse_id,
    year,
    month
ORDER BY
    year DESC,
    month DESC,
    warehouse_id,
    product_id;


UNION

UNION は、複数の SELECT ステートメントからの結果を 1 つの結果セットに結合するために使用される。UNION によって得られる結果のイメージは以下となる。
https://gyazo.com/1780b79c2638853726cbad5c0d4fb8cc

SELECT column_name FROM table_name UNION SELECT column_name FROM table_name (UNION ...);
→複数のSELECTステートメントの結果を一つに結合できる。

3 つ以上の SELECT ステートメントを繋ぐこともできます。最初の SELECT ステートメントからのカラム名が、返される結果のカラム名として使用される。

SELECT '平均値' 集計種別, AVG(age) 集計結果 FROM users
UNION
SELECT '最大値' 集計種別, MAX(age) 集計結果 FROM users
UNION
SELECT '最小値' 集計種別, MIN(age) 集計結果 FROM users;
→3つの集計結果を1テーブルで出力できる。


UNION ALL

UNION ALL の役割は、ほとんど UNION と同じ。複数の SELECT ステートメントからの結果を 1 つの結果セットに結合するために使用される。
異なる点としては、UNION ALL は出力結果に重複があってもそのまま出力するのに対し、先ほど学習した UNION は出力結果に重複があった場合に重複を削ぎ落として出力する。

SELECT age FROM users WHERE age >= 20
UNION
SELECT age FROM users WHERE age < 20
→重複するageは出力されない。

SELECT age FROM users WHERE age >= 20
UNION ALL
SELECT age FROM users WHERE age < 20
→全てのレコードのageが出力される。

異なるテーブルのカラム名等を集約させたい場合の例
SELECT
    username,
    email,
    customer_first_name AS first_name,
    customer_last_name AS last_name,
    created_at,
    'customers' AS type
FROM
    customers
UNION
SELECT
    username,
    email,
    employee_first_name AS first_name,
    employee_last_name AS last_name,
    created_at,
    'employees' AS type
FROM
    employees
UNION
SELECT
    NULL AS username,
    email,
    first_name,
    last_name,
    created_at,
    'leads' AS type
FROM
    leads
ORDER BY
    created_at DESC;


テーブルの結合

結合は、複数の集合（テーブル）に関係を持たせ、新しい要素の集合を作るために使用する。つまり、結合とは、複数のテーブルに関係を持たせて一つのテーブルとして出力することを意味する。
結合は、主テーブル（駆動表（外部表）とも呼ばれる）と、結合先テーブル（内部表とも呼ばれる）で行われる。

SELECT column_name FROM table1 JOIN table2 ON table1.id = table2.table1_id;

この SQL で言えば、駆動表は table1 で、内部表は table2となる。
ON 句には結合条件を記述します。この SQL で言えば、table1 の id カラムの値と、table2 の table1_id カラムの値が等しいレコードを結合する。


MySQL で結合時に採用されているアルゴリズムに、nested loop join というアルゴリズムがあり、以下の手順で結合が行われる。

- 駆動表のレコードを 1 行取り出す。
- 取り出したレコードと結合可能なレコードを内部表から検索する。
- 結合の処理速度のボトルネックになるのが、2 の処理。もし内部表の結合条件に使用しているカラムにインデックスが貼られていない場合、内部表をフルスキャンする必要がある。
　これは、内部表のデータ量が多くなると致命的になる。結合カラムにはインデックスを貼ることが推奨される。
※フルスキャンとは、テーブルの全レコードを検索することを指す。
https://gyazo.com/419490788d262e4ba0e63a2d067c0992

SELECT books.id AS 本ID, books.name AS 本タイトル, CONCAT(authors.family_name, ' ', authors.first_name) AS 著者名 FROM books JOIN authors ON authors.id = books.author_id;
→books テーブルを駆動表に、authors テーブルを内部表にして結合し、本 ID、本のタイトル、著者名を出力

SELECT b.id AS 本ID, b.name AS 本タイトル, CONCAT(a.family_name, ' ', a.first_name) AS 著者名 FROM books AS b JOIN authors AS a ON a.id = b.author_id
→テーブル名もカラム名と同様に AS を使ってエイリアスを付けることができる
テーブル名のエイリアスは、最初の一文字で表すことが多い。

SELECT b.id 本ID, b.name 本タイトル, CONCAT(a.family_name, ' ', a.first_name) 著者名 FROM books b JOIN authors a ON a.id = b.author_id;
→AS は省略することができる。


結合は、以下のようにさまざまな種類がある。

- 内部結合
- 外部結合
  - 左外部結合
  - 右外部結合
  - 完全外部結合
- クロス結合


内部結合

結合の中でも、内部表から結合先のレコードが見つかった駆動表のレコードのみを出力テーブルに表示する結合方法を、内部結合（inner join）と言う。
https://gyazo.com/be2a95d5593dd43b88512fd1ca843d59

SELECT a.id 著者ID, CONCAT(a.family_name, ' ', a.first_name) 著者名, b.id 本ID, b.name 本タイトル, b.author_id books_著者ID FROM authors a INNER JOIN books b ON b.author_id = a.id;

ポイントとして、
内部結合では結合先がない駆動表のレコードは、出力テーブルから消える。
内部結合を含む全ての結合は、結合先が複数存在する場合、駆動表のレコードは分裂して、内部表のレコードを結合する、


結合先が見つからなかった駆動表のレコードは消えてしまうというのは内部結合独特の動きである。


外部結合

結合先のレコードが見つからない場合も結合元のレコードを残す結合を外部結合（outer join）と言う。
外部結合では、駆動表と内部表の交わる領域以外も抽出する。

左外部結合

駆動表のデータを全て残す外部結合方法を、左外部結合（left outer join）という。
https://gyazo.com/b668002c69e3070af6c6f159fc9682d8

SELECT a.id 著者ID, CONCAT(a.family_name, ' ', a.first_name) 著者名, b.id 本ID, b.name 本タイトル, b.author_id books_著者ID FROM authors a LEFT OUTER JOIN books b ON b.author_id = a.id;

右外部結合

左外部結合と同様、駆動表のデータを全て残す外部結合方法を、右外部結合（right outer join）と言う。
左外部結合との違いとしては、駆動表が JOIN 句で指定するテーブル（図でいうと右側の集合）になるという点。
https://gyazo.com/07761f6737480e6b1dd2d060ac512d0f

SELECT a.id 著者ID, CONCAT(a.family_name, ' ', a.first_name) 著者名, b.id 本ID, b.name 本タイトル, b.author_id books_著者ID FROM authors a RIGHT OUTER JOIN books b ON b.author_id = a.id;

RIGHT OUTER JOIN の挙動は、LEFT OUTER JOIN と非常に似ており、異なる点は、駆動表がどちらになるのかという点のみ。
全てのレコードを残したいテーブルの方を駆動表として指定。


完全外部結合

結合する両テーブルについて、その結合先が見つからなかったレコードも残す、LEFT OUTER JOIN と RIGHT OUTER JOIN を組み合わせたような結合を完全外部結合（full outer join）と言う。
https://gyazo.com/6ae019e830100a3422b4c2f74e0c8080

MySQL には、FULL OUTER JOIN という文法は用意されていない。
UNION を使って、FULL OUTER JOIN と同じ挙動を実現する。

SELECT * FROM books b WHERE b.id = 3 UNION SELECT * FROM books b WHERE b.id = 1;
これを使って、LEFT OUTER JOIN と RIGHT OUTER JOIN を繋げて、FULL OUTER JOIN を実現

SELECT a.id 著者ID, CONCAT(a.family_name, ' ', a.first_name) 著者名, b.id 本ID, b.name 本タイトル, b.author_id books_著者ID FROM authors a LEFT OUTER JOIN books b ON b.author_id = a.id UNION SELECT a.id 著者ID, CONCAT(a.family_name, ' ', a.first_name) 著者名, b.id 本ID, b.name 本タイトル, b.author_id books_著者ID FROM authors a RIGHT OUTER JOIN books b ON b.author_id = a.id;

クエリ結果を見ると、LEFT OUTER JOIN の結果と、RIGHT OUTER JOIN の結果を縦に繋げているのがわかる。
以下のように要素を分解。

- LEFT OUTER JOINで、authors テーブルから見て結合相手が見つかるレコードと見つからないレコードを全て抽出する。
- RIGHT OUTER JOINで、books テーブルから見て結合相手が見つかるレコードと見つからないレコードを全て抽出する。
- 結合相手が見つかるレコードは、LEFT OUTER JOIN と同じクエリ結果になり重複するのでそれぞれを 1 つにまとめる。

このように、結合する両テーブルのレコードを全て残したい場合は、FULL OUTER JOIN を使う。


クロス結合

両テーブルの全組み合わせを作る結合で、別名直積結合とも呼ばれる。
これまでの結合では、結合条件が存在し、たとえば、「著者 ID が同じレコード同士を結合する」のような条件があった。
しかし、クロス結合は、全てのレコードを結合する。
https://gyazo.com/22131b929bba8dbb31d28d9d1443ea5e

SELECT a.id 著者ID, CONCAT(a.family_name, ' ', a.first_name) 著者名, b.id 本ID, b.name 本タイトル, b.author_id books_著者ID FROM authors a CROSS JOIN books b ORDER BY 著者ID ASC;
→authors テーブルの 1 レコードごとに、books テーブルの全レコードが順に結合される。


サブクエリ

サブクエリは JOIN 句と一緒に使用されることが多い。
SQL ではクエリ結果（仮想テーブル）を次の入力テーブルとすることができる。この時、クエリ結果を入力クエリとして使う外側のクエリをメインクエリ、クエリ結果を得るための内側のクエリをサブクエリ（subquery）と呼ぶ。
サブクエリは、括弧を使って記述でき、メインクエリとサブクエリを入れ子（ネスト）にできる。

サブクエリを含むクエリは、以下の順序で処理される。
- サブクエリ
- メインクエリ

SELECT * FROM users
INNER JOIN (
    SELECT user_id FROM posts
    WHERE created_at >= '2022-01-01 00:00:00'
        AND created_at <= '2022-12-31 23:59:59'
) posts_created_in_2022
ON posts_created_in_2022.user_id = user_id;
→上記クエリは以下の順序で処理が行われる。
- 2022 年に投稿された post の user_idを取得するサブクエリが実行される。その結果を仮想テーブルとして、posts_created_in_2022 というエイリアスを付ける。
- メインクエリで、users テーブルの id カラムと posts_created_in_2022 仮想テーブルの usr_id カラムをテーブル結合している。今回採用されている結合方式は内部結合なので、結合先が見つからなかった user は出力から排除され、結果は「2022 年に post を投稿した user」のみになる


WITH

WITH 句は、MySQL8.0 から導入された新しい文法。他の DBMS には既に実装されている機能であったが、MySQL にも WITH 句が導入された。
WITH を使用すると、サブクエリにエイリアスをつけることができる。
サブクエリはクエリが入れ子になるため、クエリ全体が長くなってしまい、可読性が落ちてしまうことが懸念される。
そこで、WITH でサブクエリにエイリアスを付けることで、そのエイリアス名を使用してメインクエリを簡潔に書くことができるようになる。

WITH alias AS (Query);
→基本文法

SELECT
    MAX(number_of_users) 最大人口,
	MIN(number_of_users) 最小人口,
	AVG(number_of_users) 平均人口
FROM
(
	SELECT
		prefecture prefecture,
		COUNT(*) number_of_users
	FROM
		users u
	GROUP BY
		u.prefecture
) main
;

WITHに書き換える

WITH
    number_of_users_by_prefecture AS (
        SELECT
            prefecture prefecture,
            COUNT(*) number_of_users
        FROM
            users u
        GROUP BY
            u.prefecture
    )
SELECT
    MAX(number_of_users) 最大人口,
	MIN(number_of_users) 最小人口,
	AVG(number_of_users) 平均人口
FROM
    number_of_users_by_prefecture
;

このように書くことで、メインクエリを簡潔に記述することができ、可読性が上がる。
コードを書く者、読む者にとって可読性は重要なので、長いサブクエリを使用する際は積極的に WITH 句を使用することが推奨される。