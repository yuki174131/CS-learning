ソフトウェアを扱う際、ほとんどのプログラムはデータの永久保存が必要となる。
通常、コンピュータの CPU はメモリを介して直接動作しますが、メモリはハードウェア的な理由から揮発性（volatile）を持る。
つまり、メモリ内のデータを保持するために電力を必要とし、メモリの電源を切ると、メモリ内のデータはすぐに失われてしまう。
そのため、恒久的に保存されているデータを取り出したり、保存したりする方法が必要になる際、データベースシステムを活用する方法がある。

データベースは非常に複雑で、膨大な量の作業負荷を処理している。低・中規模のソフトウェアでは、数十テラバイトのメモリを使用し、1 秒間に何万回もデータにアクセスして更新する。
ソフトウェアエンジニアは、臨機応変に対応できる汎用性の高いストレージシステムを必要とする複雑な構造を扱い、データサイエンティストはソフトウェアが収集したさまざまなデータセットにアクセスして分析を行う。

一方、大規模なソフトウェアでは数百万人のユーザーを扱うことが多いため、データの保存と取得に対して拡張性を持つ方法が必要となる。
その結果、保存されるデータの量と 1 秒間にアクセスされるデータの量は驚異的なものとなり、通常のソフトウェアとは異なる問題や課題が発生する。

機能、物理的特性、論理、プロトコルを 1 つのソフトウェアツールに抽象化し、データの保存や読み書きを可能にするシステムのことをデータベース管理システム（DBMS : Database Management System）と呼ぶ。
データベース管理システムは、組織化されたデータの集合体を持ち、データへのアクセス、操作、管理を行うプログラムの集合を提供する。


データベースの特性

オペレーティングシステムには、データをファイルとしてストレージに保存する方法が備わっており、プログラミング言語には、ファイルを読み書きするためのライブラリが用意されている。
このファイル処理システムによって、あらゆる種類のデータをローカルストレージに保存し、後から読み出すことができる。
また、データ構造をファイルに格納できるように文字列やビット等の形式に変換するシリアル化（serialize）や、
ファイルを読み込んでメモリ内のオブジェクトに戻す逆シリアル化（deserialize）を行うこともある。

JavaScript のようなオブジェクトを文字列として格納する JSON 形式のように、特定の規格やライブラリも存在する。
この JSON は複数の言語でサポートされており、オブジェクトを JSON ファイルにエンコードしたり、JSON ファイルをオブジェクトにデコードしたりすることができる。

複雑なソフトウェアでは以下のような問題が発生し、すぐに手に負えなくなってしまう。
- データ構造の変更や、バックアップはどうするのか？
- データの重複、繰り返し構造をどのように回避するのか？
- データの制約をどのようにチェックするのか？
- 複数のクライアントがファイルにアクセスする際のセキュリティや並行性はどうするのか？
- データへのアクセスや分析は簡単で再利用可能なのか？
- ファイルは破損しないのか？ 読み書きをどうやって拡張するか？
これらは、ファイルの作成や管理等、手動でデータを保存する際に、効率性という点で問題になってしまう。

本来データベースは、大量のユーザーが少量のデータを読み書きするトランザクション処理と、
データサイエンティストのような少数のユーザーが大量のデータを分析する、データ分析の両方に使用される。
例えば、Twitter では、ユーザー 1 人がタイムラインを読んだり、ツイートするのに必要なデータは 10MB 程度ですが、
少数で構成されるデータサイエンティストが扱うデータは何十万テラバイトにもなる。
トランザクション（transaction）とは、データエントリの更新など、状態の変化を表すデータベースシステム内の作業単位のことを指す。

DBMS は、優れた技術を使って利便性と効率性を実現しなければならない。つまり、保存されているデータの複雑な構造等に対して、開発者がデータを簡単に読み書きできるようにしながら、カプセル化を行う必要がある。
抽象化を行うことで、内部の複雑度を隠すことができるため、ブラックボックスとして入出力を用いてデータベースを管理することがでる。

また、データはソフトウェアに不可欠な要素。
データが重要な役割を果たすということは、言い換えると、それを管理するシステムも同様に重要な存在になるということ。
それでは、データベースシステムの目的を確認してみる。データベースシステムは、次のような特性を全て抽象化して、利便性の高いツールになっている。

利便性 （ease of use）
データベースは、開発者がデータを照会（クエリ）できるように、一連の言語ツールを提供している。
クエリ（query）とは、データを取得したり操作したりするために、データにアクセスするリクエストのことを指す。
開発者がアプリケーションを作成した場合、クエリを使うとユーザーが一定量のデータや特定の種類のデータにしかアクセスできないように制限することができる。
プログラミング言語やフレームワークの中には、データにネイティブに接続したりアクセスするための多くのツールがあらかじめ組み込まれているものもある。
データサイエンティストは、データベース内のデータを効率的に分析することができる。クエリは全ての階層において微調整可能で、複数のデータセットを相互に参照し、演算、述語、集約関数を適用することによって、さまざまなデータを得ることができる。
統計学と各専門分野の知識を組み合わせることで、ビジネスにおいて優位な意思決定を行うことができる。

データベース管理者は、さまざまなツールやコマンドによってデータベースを管理する。
一般的な機能として、サーバ管理、バックアップ、インポート/エクスポート、レプリケーション、インデックス、物理的なストレージアルゴリズム、ユーザー認証等がある。


永続性（durability）

永続性とは、一度コミットされたトランザクションが、システム障害（コンピュータのシャットダウンなど）が発生しても、コミットされた状態を維持することを意味する。
これは、コンピュータディスクのハードドライブに直接保存するなど、不揮発性を持つストレージによって実現される。
データベースシステムがメインメモリを使用して全てのデータを保存している場合でさえも、システムは常にディスクストレージ内にバックアップを保持している。


一貫性と統合性（consistency and integrity）

システム内のデータは、特定の情報を参照する異なるセクションが、全て同じデータを参照するように、一貫性を保つ必要がある。
例えば、オンラインショップのユーザーのメールアドレスが記録された場合、そのユーザーの請求書、連絡先、領収書、購入品には、同じユーザーの電子メールを含み、
仮にユーザーが電子メールを更新した場合においても、システム全体で一貫性が保たれ、コピーや参照が全て一致する必要がある。

データエントリは、一貫性を保証するために、制約と呼ばれる指定されたルールに従う必要がある。
例えば、ユーザーの給与を数字で入力する必要があるにもかかわらず、文字列が入力された場合、システムが整合性エラーを直ちに認識するべきで、
制約条件に従わない場合は、直ちにエラーとなり、トランザクションは実行されるべきではない。
統合性に関するルールは、参照チェック等、データベース内の一貫性を維持するために使用される。
例えば、エントリが他のエントリを識別子（id 等）で参照する場合、チェックを行い id が存在することを保証する必要がある。
仮に参照しているデータエントリが削除された場合、他の参照を削除または修正するカスケードやロールバックなど、一貫性を保つためのルールが設けられている場合がある。

データエントリが入力または更新されると、データベースは以前の状態から新しい状態、つまり古いデータから新しいデータへと移行する。
新しい状態に移行する前に、この新しい状態が有効であることを保証しなければ、以前の有効な状態に戻ってしまう。
これがデータベースシステムの一貫性を保証するものになる。


冗長性の低減（reduce redundancy）

データベースシステムは、データが効率的に整理されているという物理的な特性を持っている。
つまり、データベースを慎重に設計することで、相互参照が可能になり、不必要な重複を減らし、データベースのストレージ使用量を低く抑えることができる。
冗長性が減ることで、インデックスアルゴリズム等がより強力になり、データへのアクセスをより速く実行することができるようになる。


独立性と並行性 （isolation and concurrency）

データベースシステムでは、データを分離・独立させることができる。エントリが入力されると、そのエントリは所定の位置にロックされるか、または「コミット」される。
エントリを読み込む際には、データ形式が保証されているので、linux、macOS、windows、その他のプラットフォームから読んでも、システムは同じデータを読み込むことができる。

1 秒間に多くのデータベースの呼び出しが実行されているため、異なるプログラムやクライアントが同じデータや構造に同時にアクセスし、全てのエントリーを同時に更新しようと試みることもある。
エントリの更新など、データベースのエントリに対するトランザクションが行われると、それは分離され、完全にコミットされるまで独立して処理される。
エントリに対して複数の更新が行われた場合、分離が適用されていれば、更新は全て同時に行われるのではなく、順次処理されているかのように 1 つずつ行われることになる。

例えば、イベントのチケットを販売するアプリケーションの場合、チケット販売が開始されると同時に、何千人ものユーザがイベント A のチケットを購入しようとする。
チケットの現在の在庫が 3430 枚で、ユーザー K が 5 枚のチケットを、ユーザー L が 2 枚のチケットを同時に購入する状況を考えてみる。
トランザクションが分離されていない、同時進行のデータベーストランザクションでは、システム内で何が起こるか把握することはできない。

例えば、仮に K が先に 5 枚のチケットを購入したとしても、L の 2 枚のチケットのトランザクションが邪魔をしているせいで、チケットの合計が 3428 枚と表示されてしまう可能性がある。
その逆に、L がチケットを先に購入しているにもかかわらず、K のトランザクションが邪魔をしてトータルが 3425 枚になってしまう可能性もある。
本来ならば、最終チケットは 3423 枚になるはずが、上記のケースではチケットの在庫数の計算の整合性が合わない。

独立したトランザクションでは、K と L のどちらが先に処理されても問題ない。
2 つの処理は分離されるので、トランザクションは 1 つずつ進み、他のトランザクションが終わってから次のトランザクションに移ることになる。
つまり、一連の操作が 1 つずつ適用され、全て合格して状態が更新されるか、全て失敗して状態が更新されないかのどちらかになる。


原子性（Atomicity）

原子性とは、「原子」という言葉に由来しており、分割できないものという意味を指す。
データベースのトランザクションにおいて、システムの状態を変化させる一連の操作が、全体的に起こるか、あるいは全く起こらないことを意味する。
これは、障害やエラーの発生からデータを守るために非常に重要になる。

例として、ユーザーがある大学へ授業料を支払う場合を考えてみる。クレジットで 1 万ドルを支払った際に、システム障害が発生したとする。
クレジットが削除されたにも関わらず、システム上で学生が授業料を支払っていないと表示されてしまう可能性がある。

この場合、データベースが原子性を持つことは非常に重要になります。
つまり、1 万ドルのクレジットが削除され学生の授業料が支払われるか、あるいは完全に何も起こらないという 2 つの選択肢のみを持つことになる。
仮に、途中でエラーが発生しても、クレジットは削除されない。実際の開発では、トランザクションの処理が途中で終わった場合は、前の状態にロールバックすることが通例となる。
https://gyazo.com/8a921afea8b51894a4579def3f0f9069

ACID、すなわち原子性（Atomicity）、一貫性（Consistency）、独立性（Isolation）、永続性（Durability）は、データベースシステムの基本であり、主要な要素になる。


セキュリティ（security）

データが非常に貴重なものである以上、データベースシステムにはセキュリティが不可欠。
セキュリティは、意図的かどうかを問わず、データのアクセスや更新に対して行われる安全対策のことをさす。
システムは認証メカニズムを提供し、データがしっかりと管理されるようにする。

例えば、ソーシャルメディア上での個人情報について考えてみる。
アプリ上で何らかのトラブルが発生したため、ユーザーがサポートチケットを消費して、サポートデスクへ連絡したとする。
サポートデスクの人間は、ユーザーの設定、登録日等の特定のデータにはアクセスすることができますが、個人的なプライベートメッセージを閲覧することはできない。

認証メカニズムのおかげで、データベースシステム内で異なるアカウントが提供されるので、各データベースユーザーがアクセスできるものをフィルタリングすることができる。
これにより、任意のセキュリティルールを適用することができる。
サポートチケットのケースでは、サポートのみに関する限られた量のデータにのみアクセス可能なデータベースユーザ「support_tickets」を設定することができる。
つまり、サポート管理のダッシュボードを扱う開発者は、 「support_tickets」 ユーザを通してのみバックエンドコードに接続することになる。

全てのデータベースは、パスワードで安全に管理されており、承認されたハッシュキーを使ったアクセスなど、追加のセキュリティレイヤーも用意されている。
他にも、読み取り専用オプションや、特定のデータベースユーザーに対する書き込み制限など、多くのセキュリティルールを細かく設定することができる。

