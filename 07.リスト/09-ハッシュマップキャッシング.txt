ハッシュテーブル（hash table）とは、キーと配列のインデックスを関連付けるために使われるデータ構造である。
この関連付けは、ハッシュ関数を使って行われる。
ハッシュ関数は、キーを入力とし、ハッシュ値という整数を出力する。
このハッシュ値を配列のインデックスとして使用することで、ハッシュテーブルから素早く値を取り出すことができる。

例えば、ある人の名前をキーとして、その人の年齢を値としてハッシュテーブルに保存する場合、キーのハッシュ値を配列のインデックスとして使用し、年齢をその場所に格納する。
その後、キーを使用してハッシュ値を計算し、対応する配列のインデックスを探すことで、その人の年齢をすばやく取得することができる。

ハッシュテーブルは、キーに基づく検索や挿入、削除などの操作を効率的に行えるため、非常に便利なデータ構造と言える。
ハッシュマップ内の要素へのアクセスの平均時間計算量は O(1) 。この機能のおかげで、ハッシュ関数が使われている限り、すべてのプログラミング言語でキーに基づいたリスト内のデータを一定時間で取得することができる。
O(1) でデータ取得ができるので、ハッシュマップは必要不可欠なデータ構造の一つとなっている。

整数によって構成されるリスト L1、L2 を受け取って、両方のリストの交点を返す関数を実装してみましょう。交点とは両方のリストに含まれるすべての整数を指します。1 つのやり方として、片方のリスト L1 のそれぞれの要素が、もう片方の要素 L2 に存在するかチェックする方法があるでしょう。例えば、[1,2,3], [2,3,4] をチェックする場合、1 が [2,3,4] に含まれているかチェックし、2 と 3 についても同様の処理を繰り返せば、答えに辿りつくことができます。

ハッシュマップの注意点

ハッシュマップは、キーと値を組み合わせたデータ構造で、データを追加した順番や想定する順番でキーを取得することが保証さればう。
キーは順番のないリストのようなものであるため、どのような順番で取得されるか予測することはできない。そのため、キーの順番に依存する処理を行う場合は、注意が必要。
O(1) 時間で検索することができますが、ハッシュマップとして既に保存されているデータやキャッシュされているデータでできることは非常に限られている。
例えば、O(n) でリストから全てのキーを昇順や降順で取得したりすることはできない。また、O(n) より早く最大値や最小値などを取得することはできない。


