配列（array）は、連続したメモリにそれぞれの要素を格納するデータ構造。要素は通常、連続した形で保存され、各要素はメモリ内の特定の場所を占める。
各要素のメモリ上の位置は、各データのサイズと配列内の項目のインデックスに基づく簡単な数式で計算できるため、配列内の特定の項目に高速にアクセスすることができる。

例えば、"hello" という文字列を変数に格納する。
この変数が宣言されると、コンピュータは文字列値 "hello" を格納するためのメモリブロックを確保する。
このメモリブロックのサイズは、文字列の長さと変数のデータ型に依存する。
文字列 "hello "には 5 つの文字（h、e、l、l、o）が含まれているので、指定されたメモリアドレス（0x00001234）から始まる連続した 5 つのメモリセルを占有することになる。

インデックスを用いたアクセス

配列では、各要素が連続してメモリに格納され、各要素の大きさによって各要素間の距離が決まる。
つまり、要素のサイズとアクセスしたい要素のインデックスから、簡単な計算式でそのメモリアドレスを算出すれば、配列内のどの要素にもアクセスできる。

配列の注意点

配列は固定されているため、一度宣言された項目を削除することはできない。要素内のデータを置き換えることのみ許されている。
例えば、4 番目の要素の値を 3 から 20 に変更するような操作。配列は可変オブジェクトのため、これらの操作が可能。
配列のサイズ以上に要素を追加するには、より大きなサイズの新しい配列を作成して、すべての項目を新しい配列にコピーする必要があry。
コピーする要素が n 個あるので、これには O(n) の時間計算量がかかる。配列の値の取得には、O(1) の時間がかかる。
それは連続したメモリ構造を持っているからで、ベースアドレス +（インデックス × データサイズ）の式を使うことによって、インデックスはメモリから直接値を取得することができる。
このように、任意の要素に同じ時間でアクセスできることを、ランダムアクセス、またはダイレクトアクセスと呼ぶ。
