インデックス以外に文字列を使って、データを効率的に取得することを考える。
例えば、ある本のタイトルを知りたいときは myBook["title"]、あらすじを知りたいときは myBook["description"] といったようにデータを取得できる。

このようにコンピュータが文字列などのキーをインデックスとして使用する場合、これは連想配列（associative array）と呼ばれる。
連想配列は、従来の配列のような数値インデックスではなく、文字列やその他のキーをインデックスとして使用するデータ構造である。

キーに記述的な意味を持たせることができるため、人間がデータを理解し利用することが容易になる。
プログラミング言語では、連想配列はしばしば辞書やマップと呼ばれることもあります。配列内の位置ではなく、特定のキーを使って素早くアクセスする必要があるデータを格納するのに便利。


以下の例では、人物の名前をキーとして、電話番号を値として格納しています。これにより、名前をキーに特定の人物に関する電話番号を簡単に取得することができる。

Associative Array: PhoneNumber

Key          | Value
------------------------------
"Alice"      | "XXX-XXX-XXXX"
"Bob"        | "YYY-YYY-YYYY"
"Charlie"    | "ZZZ-ZZZ-ZZZZ"

PhoneNumber["Alice"] # XXX-XXX-XXXX


連想配列の実装

多くのプログラミング言語では、文字列は文字の並びであり、内部では数字の並びとして表現される。
連想配列内の値を効率的に検索するために、キーは通常ハッシュ関数でハッシュ化されている。
ハッシュ関数とは、キーを取り込んで、ハッシュ値またはハッシュコードと呼ばれる固定サイズの出力を生成する関数で、
配列内のキーを識別するために使用される。ハッシュ値は通常数字で、キーに含まれる文字のコードポイントに基づいて計算される。

ハッシュマップ

連想配列を実装する方法のひとつにハッシュマップ（hashmap）がある。
ハッシュマップは、ハッシュ関数を用いてキーと値を対応付けるデータ構造。ハッシュマップでは、キーは通常文字列で、値は任意のデータ型にすることができる。
ハッシュ関数では、キーをハッシュ値と呼ばれる数値に変換する。ハッシュ値は、ハッシュマップ内のどこに値を格納すべきかを決定するために使われ、また、値が必要になったときにその値を調べるために使われる。
例えば、名前をキー、電話番号を値としてハッシュマップに格納するには、ハッシュ関数を使って名前を数値として変換し、そのインデックスに電話番号を格納して配列に格納する。
電話番号を取り出すには、ハッシュ関数を使って名前のインデックスを計算し、そのインデックスにある電話番号を配列で調べる。
ハッシュマップを使うと、インデックスを使う時と同様に、時間計算量 O(1) で要素にアクセスすることができます。これはハッシュマップを使う大きなメリットになる。

キャッシュ
キャッシュ（cache）とは、データを保存し、そのデータに対する将来の要求をより速く処理できるようにするハードウェアまたはソフトウェアコンポーネントのことを指す。
キャッシュは、頻繁に使用またはアクセスされるデータへのアクセス時間を短縮することによって、システムのパフォーマンスを向上させるために使用される。
キャッシュは、コンピュータの中にある一種の保存場所で、CPU や Web ブラウザ、データベースなど、いろいろな場所で使用される。
キャッシュは、以前にアクセスされたデータのコピーを保存することで、同じデータがもう一度要求された場合に、元の場所から取得するのではなく、素早くキャッシュから取得できるようにする仕組みである。