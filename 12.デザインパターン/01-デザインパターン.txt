
オブジェクト指向によるソフトウェア開発を行う場合、コードのリファクタリングを最小限に抑えるため、将来起こりうる仕様変更を考慮しながら、再利用可能なソフトウェアを設計するのが理想的ある。
同様に、低結合、高凝集のシステムを実装するのも目標になる。また、設計はコードの複雑度によって測られるが、可能な限りシンプルかつ、将来の仕様変更に対して十分な余地を残しておく必要がある。

再利用性
全く同じコードを異なる状況下で再利用するという点で、コードがどれだけ汎用性を持つかを意味し、コードの再利用がどれだけ簡単で、どれだけ多くのシナリオをカバーできるかによって測定される。
再利用性が高ければ高いほど、その設計は優れていると評価される。

リファクタリング
外部契約のプロパティを全て維持したまま、内部的にコードを編集するプロセスのことを指す。
リファクタリングされたコードは他のソフトウェアに一切の影響を与えないことが理想的とされており、設計のリファクタリングが簡単であればあるほど、良いコードと評価される。

結合度
あるモジュールが他のモジュールとどれだけ絡み合ってるかを意味する。
高結合とは、2 つのモジュールが絡み合っており、お互いに依存していることを意味し、低結合とは、2 つのモジュールがそれほど絡み合っておらず、お互いにほとんど依存していないことを意味する。

凝集度
構造体やモジュールの要素が、一つのタスクを達成するためにどれだけうまく連携しているかを意味する。
したがって、これは構造の内部の要素がどれだけ連携して、1 つのことを正確にこなすことができるかを表す。
高凝集とは、構造体の全ての要素がうまく連携し、単一の最終目標を達成することに集中していることを意味し、低凝集とは、構造体の要素が集中しておらず、あまりにも多くの無関係なタスクや最終目標を行っていることを意味す。

複雑度
設計のコードベースがどれだけ複雑かどうかを指す。複雑度が大きいと、ソフトウェアのデバッグ、テスト、拡張、保守が非常に困難になる一方、複雑度が小さいと、よりシンプルで優れた設計となる。


デザインパターンとは、洗練されたソフトウェアシステムに頻繁に登場する設計を集約したもの。
十分にテストされ、文書化され、言語に組み込まれているパターンも存在する。デザインパターンは、全ての OOP フレームワークに共通して使われており、このコースでは特に OOP 言語のデザインパターンについて詳しく学習していく。

シンプルで、再利用可能で、リファクタリングが容易で、低結合/高凝集を維持している全てのソフトウェアは、常に開発の速度を向上させ、コストを大幅に節約する。
また、ソフトウェアの規模をスケールさせたり、より多くの機能を持ったり、バグを減らすことができる。十分にテストされたデザインパターンを使うことで、高品質なソフトウェアを構築し、維持することができる。

設計のゴールは、開発能力と予算を最大限に活用しつつ、再利用性が高く、リファクタリングが容易なコードベースを持つ、低結合高凝集かつ複雑度の小さいオブジェクト指向ソフトウェアを作成すること。
それを実現するには、大規模なオブジェクト指向開発チームや拡張性の高いソフトウェア（例. 人気なフレームワーク）に見られるパターンを理解するための知識が必要となる。

最初に学ぶ OOP デザインパターンはインスタンス化を伴う。これらのデザインパターンは、生成パターン（creational pattern）と呼ばれることもある。


