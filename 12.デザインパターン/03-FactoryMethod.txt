Factory Method は、オブジェクト O を作成することを目的としたインターフェース E で定義されたメソッドで、クライアントはこのメソッドを呼び出して O オブジェクトを作成する。
E のサブクラスは、異なる種類の O オブジェクトや O のサブクラスのオブジェクトを生成するために Factory Method を再定義することができる。
https://gyazo.com/6842a09b219389ff8a2778c442c29ac9

Factory Method を使うと、特定のオブジェクトを作成する責任をサブクラスに委ねることができる。元のクラスが提供する他の全ての機能は、通常通りに動作する。
サブクラス間の唯一の違いは、各サブクラスが Factory Method を実装したり、上書きしたりすることで、結果的に異なるオブジェクトが使用されることになる。

Factory Method を使用する理由。

関数が単一のタスクだけを行うという単一責任則（Single-Responsibility Principle）に従って開発を進めるのが理想になるが、オブジェクトを作成する際、プロセスが非常に複雑になる可能性がある。
オブジェクトを作成するプロセスは一つのタスクであり、ブラックボックスとして扱われることが推奨される。

これは関心の分離（Separation of Concerns）につながる。例えば、オブジェクトの作成に 50 行のコードが必要な場合でも、クライアントは気を取られるべきではない。
それは、オブジェクトの作成以外にも多くの実装をしなければならず、特定のインターフェースに従ったオブジェクトを必要としているだけだからである。

クライアントが特定のオブジェクトを作成するのは手間がかかるだけでなく、再利用性やメンテナンス性が欠ける。例えば、画面上に音符を生成するダンス用の組み込みシステムを考える。
音符には、上、下、左、右、プラス、星、爆弾など、さまざまな種類のものがあり、それぞれに増減する値や特殊な音、組み合わせが存在する。これらは全て音符なので、同じインタフェースを共有している。

クライアントは全ての可能性を予測することはできないが、Factory Method を使えば、インターフェースに続く全ての可能なオブジェクトを操作することができる。その後、サブクラスがオブジェクトを指定する。

Factory Method Pattern を Creation Method や Simple Factory と混同しないように注意。
Factory Method は、ユーザーがメソッドをサブクラス化し、そのメソッドを上書きして別のオブジェクトを作成できるようにする目的でオブジェクトを作成する、クラス内のメソッドにちなんで一般的に名前が付けられたパターンのことを指す。
https://gyazo.com/8169b9785a8ed13b87ea2eafa87c906b

Creation Method は、パラメータを取り込んで特定のオブジェクトを作成する任意のメソッドのことを指す。これにより、オブジェクトの作成とロジックの作成が単一のメソッドに委ねられる。
Factory Method は全て Creation Method であるが、特定のオブジェクトを作成するために、ユーザーに Creation Method をサブクラス化して上書きすることを義務づけたり、許可したりすることもできる。
Factory Method は、継承とサブクラス化のおかげで柔軟性と拡張性の両方を持ち合わせている。

コアシステムがある多くのフレームワークで Factory Method を目にすることになるが、フレームワークアプリケーションがユーザーのオブジェクトと動作するように、
サブクラスを介してコードを拡張できるようにしている。アプリケーションはオブジェクトの無限の可能性を予測することはできませんが、作成されるオブジェクトが持つ必要のあるインターフェースは指定することができる。
ユーザーが同じインターフェースに従うオブジェクトを作成する限り、クライアントはそのオブジェクトを使用することができる。

FactoryMethodの例

