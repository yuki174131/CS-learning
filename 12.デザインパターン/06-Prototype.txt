Prototype Pattern は、プログラム実行時にオブジェクトを作成し、それらのオブジェクトを使用して、システム全体で必要なだけ同じオブジェクトを作成するパターン。
Prototype Pattern には、キー：識別子、値：オブジェクトのペアのレジストリが含まれ、各オブジェクトはそれ自身をクローンする clone() メソッドを実装する。
キーと値のレジストリは、単純にインデックスがキーとなる動的配列として実装することも、どんな値でもキーにできるハッシュマップとして実装することもできる。

全ての Prototype オブジェクトは clone() メソッドを実装する必要がある。
オブジェクトを正確にクローンする方法、オブジェクトをディープコピーする方法の詳細はカプセル化されており、その処理を定義するのはクラス次第になる。
https://gyazo.com/377e1e61c8e7dd3d7d6a0ddfccfb7592

import java.util.Map;
import java.util.HashMap;

interface Prototype<E>{
    abstract E clone();
}

interface Stamp extends Prototype<Stamp>{
    abstract String getTitle();
    abstract String getRender();
    abstract String getColor();
    abstract Stamp clone();
}

class GenericStamp implements Stamp{
    private final static String TITLE = "Generic Stamp";
    private final static String RENDER = "❔";

    protected String title;
    protected String render;
    protected String color;

    public GenericStamp(){};

    public GenericStamp(String color){
        this.title = GenericStamp.TITLE;
        this.render = GenericStamp.RENDER;
        this.color = color;
    }

    public GenericStamp(Stamp stamp){
        this.title = GenericStamp.TITLE;
        this.render = GenericStamp.RENDER;
        this.color = stamp.getColor();
    }

    public String getTitle(){
        return this.title;
    }

    public String getRender(){
        return this.render;
    }

    public String getColor(){
        return this.color;
    }

    public Stamp clone(){
        return new GenericStamp(this);
    }

    public String toString(){
        return this.title + " - " + this.render + " (" + this.color + ")";
    }
}

class StarStamp extends GenericStamp{
    private final static String TITLE = "Star";
    private final static String RENDER = "⭐";

    public StarStamp(String color){
        this.title = StarStamp.TITLE;
        this.render = StarStamp.RENDER;
        this.color = color;
    }

    public StarStamp(Stamp stamp){
        this.title = StarStamp.TITLE;
        this.render = StarStamp.RENDER;
        this.color = stamp.getColor();
    }

    public Stamp clone(){
        return new StarStamp(this.getColor());
    }
}

class HeartStamp extends GenericStamp{
    private final static String TITLE = "Heart";
    private final static String RENDER = "💖";

    public HeartStamp(String color){
        this.title = HeartStamp.TITLE;
        this.render = HeartStamp.RENDER;
        this.color = color;
    }

    public HeartStamp(Stamp stamp){
        this.title = HeartStamp.TITLE;
        this.render = HeartStamp.RENDER;
        this.color = stamp.getColor();
    }

    public Stamp clone(){
        return new HeartStamp(this);
    }
}

class PeaceStamp extends GenericStamp{
    private final static String TITLE = "Peace";
    private final static String RENDER = "☮️";

    public PeaceStamp() {}

    public PeaceStamp(String color){
        this.title = PeaceStamp.TITLE;
        this.render = PeaceStamp.RENDER;
        this.color = color;
    }

    public PeaceStamp(Stamp stamp){
        this.title = PeaceStamp.TITLE;
        this.render = PeaceStamp.RENDER;
        this.color = stamp.getColor();
    }

    public Stamp clone(){
        return new PeaceStamp(this);
    }
}

class TreeStamp extends GenericStamp{
    private final static String TITLE = "Tree";
    private final static String RENDER = "🌲";

    public TreeStamp(String color){
        this.title = TreeStamp.TITLE;
        this.render = TreeStamp.RENDER;
        this.color = color;
    }

    public TreeStamp(Stamp stamp){
        this.title = TreeStamp.TITLE;
        this.render = TreeStamp.RENDER;
        this.color = stamp.getColor();
    }

    public Stamp clone(){
        return new TreeStamp(this);
    }
}

class RainbowStamp extends GenericStamp{
    private final static String TITLE = "Rainbow";
    private final static String RENDER = "🌈";

    public RainbowStamp(String color){
        this.title = RainbowStamp.TITLE;
        this.render = RainbowStamp.RENDER;
        this.color = color;
    }

    public RainbowStamp(Stamp stamp){
        this.title = RainbowStamp.TITLE;
        this.render = RainbowStamp.RENDER;
        this.color = stamp.getColor();
    }

    public Stamp clone(){
        return new RainbowStamp(this);
    }
}

class StampPrototypeFactory{

    // 静的メモリへの格納
    private static Map<Integer, Stamp> stampRegistry;

    private final static String DEFAULT_COLOR = "#e74c3c";

    // 静的ブロックは、クラスがロードされたときに実行されるコードです。これは、問題が最初に実行されたときに静的データを初期化するのに便利です。
    static {

        // レジストリの最初のデータを初期化します。キーは必ずしも整数である必要はありません。
        StampPrototypeFactory.stampRegistry = new HashMap<Integer, Stamp>();

        // star、heart、peaceスタンプを持ちます。
        StampPrototypeFactory.stampRegistry.put(0, new GenericStamp(StampPrototypeFactory.DEFAULT_COLOR));
        StampPrototypeFactory.stampRegistry.put(1, new StarStamp(StampPrototypeFactory.DEFAULT_COLOR));
        StampPrototypeFactory.stampRegistry.put(2, new HeartStamp(StampPrototypeFactory.DEFAULT_COLOR));
        StampPrototypeFactory.stampRegistry.put(3, new PeaceStamp(StampPrototypeFactory.DEFAULT_COLOR));
    }

    // より多くの項目を登録または変更できるようにします。見つからない場合は、プロトタイプに追加します。
    public static void updatePrototype(Integer key, Stamp stamp){
        StampPrototypeFactory.stampRegistry.put(key, stamp);
    }

    // オブジェクトを取得します。これはレジスタ内にあるもののクローン（ディープコピーを作成）を作成することに注意してください。
    public static Stamp get(Integer key){
        Stamp p = StampPrototypeFactory.stampRegistry.get(key);
        if(p != null) return p.clone();
        return null;
    }
}

class FairyWorld{
    public void photoBoothShoot(Integer[] stampSlots){
        String endl = System.lineSeparator();

        for(int i = 0; i < stampSlots.length; i++){
            System.out.println("Stamp - " + StampPrototypeFactory.get(stampSlots[i]) + " used in the photoshoot!");
        }
    }
}

class Main{
    public static void main(String[] args){
        String endl = System.lineSeparator();

        // オブジェクトを作成するのは呼び出し元の仕事です。実際のシステムでは、このプロセスはすでに組み込まれている可能性があることに注意してください。これは動的でテスト可能なものになります。
        System.out.println(StampPrototypeFactory.get(1));
        System.out.println(StampPrototypeFactory.get(0));
        System.out.println(StampPrototypeFactory.get(2));

        // プロトタイプレジストリ内のアイテムを動的に追加または置換します。
        // スロット4をstarスタンプに変更します。
        StampPrototypeFactory.updatePrototype(4, new StarStamp("#f1c40f"));
        StampPrototypeFactory.updatePrototype(5, new TreeStamp("#2980b9"));
        StampPrototypeFactory.updatePrototype(6, new RainbowStamp("#ecf0f1"));
        StampPrototypeFactory.updatePrototype(7, new PeaceStamp("#95a5a6"));

        FairyWorld fw = new FairyWorld();
        fw.photoBoothShoot(new Integer[]{3,4,2,1,1,1,2,3,4,5,5,6,6,7,7,0,1,4});
    }
}


オブジェクトのクローンを作成する方法に注目。全く同じクラスのオブジェクトを受け取り、そのオブジェクトをベースにオブジェクトを構築するオーバーロードされたコンストラクタを作成することが効果的なケースもある。
言語によるが、両方のオブジェクトが同じクラスを共有している場合、private の状態にアクセスすることができる。

しかしながら、複雑なオブジェクトのケースではディープコピーを行うのは簡単ではなく、シリアライズアルゴリズムが必要になることもある。
これは、オブジェクトを文字列やビットに変換し、再度オブジェクトに変換しなければならないことを意味する。

最後に、このようにレジストリを使用することで、与えられた入力に基づいてオブジェクトを作成する Factory が必要になることに注意。
これは、特定のメソッドが呼び出されるのではなく、同じメソッドが与えられたキーで呼び出されるという点を除いて、Abstract Factory と全く同じになる。
これは、実行時に Factory にオブジェクトを動的に追加する機能でもある。

以下は、Prototype Pattern の構造を示した UML。
https://gyazo.com/fb87ffa64fc5028d00d4f6531345d704

このパターンにはいくつかの欠点があることに注意。Abstract Factory や Builder と同様に、Prototype 用のレジストリを作成するのは非常に複雑になる可能性がある。
Factory Method を使う Abstract Factory とは異なり、サブクラスによる拡張性はほとんどなく、クライアントが使うオブジェクトを作成する手順を制御することはほとんどできない。

プログラム実行時に要素を作成することができるということは、動的であることを意味し、言い換えれば、コンパイルチェックの恩恵（例えば、obj.getAddress() というコードを実行した時に、getAddress() というメソッドが存在するかチェックされる等）
を完全に受けることができないことを意味する。

最後に、オブジェクトの作成をカプセル化する Factory Method とは異なり、Factory のレジストリ内に配置されたオブジェクトをインスタンス化しなければならない点に注意。
例えば、Factory Method では、既に作成されたオブジェクトやオブジェクトプール内に存在するオブジェクトを再利用することができる。