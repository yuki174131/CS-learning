優れたソフトウェア設計の原則に反するため、避けるべきパターン群も存在する。
これらのパターンはアンチパターン（anti-pattern）と呼ばれ、スパゲッティコード、神オブジェクト、金色のハンマー、マジックナンバー、散弾銃手術などのパターンがある。

大きな泥の塊（big ball of mud）
コードが絡み合って無秩序になったソフトウェアシステムを表すのに使われる用語。開発者が適切な計画やアーキテクチャを持たずに、システムにどんどん機能や特徴を追加していくため、時間の経過とともに徐々に発生するのが一般的。
その結果、理解、維持、更新が難しく、バグやエラーが発生しやすいシステムになってしまう。また、泥の塊のようなシステムは、そのプロセスを導く明確な組織やアーキテクチャがないため、リファクタリングや再構築が困難な場合もある。

スパゲッティコード（spaghetti code）
非常に複雑に絡み合ったソースコードのことで、理解、修正、保守が困難なソースコードを表す言葉として使われている。
スパゲッティには、複雑に絡み合った多くの繊維があるように、スパゲッティコードには、複雑で相互依存的なプログラミング構成要素、関数、モジュールが多数あり、追跡やデバッグが困難。
スパゲッティコードは、プログラマがコードを書く際に、整理が不十分であったり、理解しにくい複雑な論理を使用していたりする場合に発生することが多い。
また、コードベースを適切に再構築せずに多くの変更を加えた結果、コードが絡み合ってしまうこともある。スパゲッティコードは、エラーやバグを引き起こすだけでなく、他のプログラマがそのコードを扱うことを困難にするため、一般に悪い習慣と考えられている。

神オブジェクト（god object）
責任や機能が大きすぎるオブジェクトやクラスのことを指す。万能で全知全な存在として認識されるため、理解、保守、テストが難しくなることから神オブジェクトと呼ばれている。
1 つのオブジェクトが多くの機能を担当しすぎると、オブジェクトが変化する理由は一つであるべきという「単一責任」の原則に反することになる。
このため、コードベースが密結合になり、神オブジェクトに加えられた変更が、システムの他の部分で意図しない結果をもたらす可能性がある。
また、神オブジェクトの複雑な相互作用や依存関係を完全に理解していない可能性があるため、他の開発者が同じコードベースで作業する際の妨げになる可能性がある。

金色のハンマー（golden hammer）
開発者のアンチパターンの一つで、特定の技術、ツール、またはアプローチを、それが状況に最適かどうかにかかわらず、すべての問題に対して使用することを指す。
これは、非効率的で効果のないソリューションにつながり、より適したツールやテクノロジーを使う機会を逃すことになりかねない。
金色のハンマーという名前は、「ハンマーさえあれば、すべてが釘に見える」ということわざに由来している。

マジックナンバー（magic number）
説明や文脈なしにプログラムのソースコードに直接現れる数値のこと。特定の日付や最大ファイルサイズなど、特定の値や条件を表すために使用されることが多い。
しかし、このようにマジックナンバーを使用すると、コードが読みにくくなり、理解しにくくなり、保守しにくくなることがある。
代わりに、これらの値に対して名前付きの定数や列挙を定義することが一般的に良い習慣と考えられており、これによりコードがより読みやすくなり、変更も容易になる。
これらの値に意味のある名前を付けることで、コードを読んだ他の開発者は、その文脈や目的を解読することなく、数値が何を表しているかをすぐに理解することができる。
また、マジックナンバーが矛盾して使用されたり、コード内の複数の場所で更新する必要がある場合に発生するエラーを防ぐことができる。

散弾銃手術（shotgun surgery）
開発者が新機能を実装したりバグを修正したりするために、複数のファイルにわたって複数の変更を行う必要がある場合に発生するアンチパターンを表す用語。
これは、コードが適切にモジュール化されていない、あるいは整理されていないことを示すサイン。

一箇所に的を絞って変更を加えるのではなく、開発者は散弾銃のようにコードベース全体に変更を「撃ち込む」必要があり、時間がかかり、エラーが発生しやすく、新しいバグが発生するリスクが高くなる。
また、このようなアプローチでは、変更を追跡したり、コードの異なる部分が互いにどのように関連しているかを理解することが難しくなる。
ソフトウェアに使用するパターンを選択する場合、そのパターンが解決しようとする問題にマッチしているか、ソフトウェアの目的に関連しているか、そのパターンを使用することで起こりうる結果が意図した目標に合致しているかを確認することが重要。
もし、あるパターンが最適かどうかわからない場合は、他の選択肢を検討し、それぞれの利点と欠点を評価した上で決定するのがよい。