多くの場合、目の前の問題は、ソフトウェアで繰り返し発生する問題。つまり、ソフトウェアを設計する場合、車輪の再発明をするのではなく、すでに利用可能なソリューションがあるかどうかを検討するのが賢明な選択となる。
なぜなら、新しく設計したソリューションが問題に合わない、あるいは既存のソリューションほど効果的でないというリスクがある。

幸い、ソフトウェア開発で頻繁に起こる問題であれば、デザインパターンと呼ばれる広く受け入れられている解決策がある場合がほとんどである。
デザインパターンは、ソフトウェア設計の一般的な問題に対する再利用可能な解決策で、その分野の専門家によって特定され、文書化されている。
デザインパターンは、ソフトウェア開発における一般的な問題を解決するための、信頼性が高く、効率的で、一貫性のある方法を開発者に提供する。

ソフトウェアエンジニアは、経験と直感を使って、ソフトウェア設計によくあるパターンを認識し、それに従って解決策をソフトウェアとして開発する。
ソフトウェアエンジニアは、問題を解決するために使用できるパターンを特定した場合、特定のドメインに特化した公式文書や書籍にそれを文書化することがよくある。
この文書によって、他のエンジニアがそのパターンを学び、自身のソフトウェア開発プロジェクトで適用することができる。
デザインパターンには通常、エンジニアがパターンを識別し参照するのに役立つ、以下のコンポーネントが含まれている。

パターン名
パターンに付けられた名前で、識別や参照を容易にするのに役立つ。

カテゴリ
パターンのカテゴリは、類似のパターンを分類してグループ化するのに役立つ。

問題
そのパターンが解決しようとしている問題を詳細に説明する。

適用性
問題領域に対する制約を設定し、パターンを適用できる具体的なシナリオと環境をリストアップする。

解決方法
問題を解決するための構成要素や構造、部品間の連携などを図や説明で示し、パターンを使ってどのように問題を解決するかを説明する。
構造、構成されるコンポーネント、依存関係モジュール、パーツ同士がどのように連携して問題を解決するのかを列挙している。

結果
パターンを使用することの利点を列挙し、問題を解決する際に優れた設計コンセプトや原則がどのように守られているかを詳しく説明する。
また、潜在的なマイナス面や注意点を列挙することもある。

実装
特定の言語や環境において、パターンをどのようにコードで実装できるかを詳細に説明する。

サンプルコード
このパターンを実装した実際のコードを掲載し、読者が参照できるようにする。

ケーススタディ
読者が知っているソフトウェアを中心に、パターンを実装しているソフトウェアとその部分のリストを提供する。


これらの構成要素を含めることで、ソフトウェア工学における共通の問題を解決しようとする技術者にとって、デザインパターンがより理解しやすく、アクセスしやすくなる。
ある問題に対する優れた解決策がすでにあるかどうかを調べるには、その問題領域に関連するパターンを調べることから始めることができる。
そのためには、解決する問題や背景にある動機など、パターンの種類によって分類し、そのパターンの適用可能な部分が自分の状況にマッチしているかどうかを確認する必要がある。
デザインパターンは多様で、常に進化しており、何千種類ものパターンが存在する。この複雑さを理解するために、デザインパターンはそのドメインによって分類されている。

