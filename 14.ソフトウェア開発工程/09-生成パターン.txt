オブジェクト指向プログラミングの中で、デザインパターンは大きく 3 つに分類されます。
生成パターン（creational pattern）、構造パターン（structural pattern）、行動パターン（behavioral pattern）。
生成パターンは、ソフトウェア開発におけるオブジェクトの作成方法を扱うデザインパターン群。
状況に応じてオブジェクトを作成する最適な方法を見つけることに重点を置いている。

ファクトリメソッドパターン（factory method pattern）
オブジェクトを作成するためのインターフェースを提供するが、どのクラスをインスタンス化するかはサブクラスが決定する。
これは、すべての他の部分を同じままに保ちながら、サブクラスによって異なるタイプのオブジェクトを作成したい場合に役立つパターン。
https://gyazo.com/7917e34bdc5dd010e54fe98bf454229e

ビルダーパターン（builder pattern）
複雑なオブジェクトの構築とその表現を分離し、メソッドの連鎖を通じて異なる表現を作成するのに同じ構築プロセスを利用できるようにする。
このパターンは、複雑な構造を持つオブジェクトを作成する必要があり、その構築プロセスと表現を分離したい場合に役立ちます。
https://gyazo.com/7729a74d44be6d3183e9578bbbe415ad

抽象ファクトリパターン（abstract factory）
具体的なクラスを指定せずに、関連するオブジェクトのファミリーを作成するためのインターフェースを提供する。
このパターンは、コードベースの異なる場所でお互いに関連するオブジェクトのセットを作成したい場合、各個のオブジェクトを渡すのではなく、抽象ファクトリーを渡すのに役立つ。
https://gyazo.com/1174058f1e58c93eaee9fa8cd005fb55

プロトタイプパターン（prototype pattern）
元となるインスタンスをクローンして新しいオブジェクトを効率的に作成する方法。
プロトタイプパターンを使用すると、オブジェクトを新たに生成するコストや時間を削減でき、パフォーマンスの向上とメモリ使用量の最適化に寄与する。
これは、新しいオブジェクトが頻繁に必要とされ、かつその生成に負荷が伴う場合などに特に役立つ。

シングルトンパターン（singleton pattern）
特定のクラスが 1 つのインスタンスしか生成できないようにするもの。
これにより、そのクラスのオブジェクトがプログラム中で 1 つしか存在しないことを保証します。静的メモリにインスタンスを保存し、それをプログラム全体で共有する。





