オブジェクト指向プログラミングでは、SOLID の原則に従うのが一般的。

S: 単一責任原則（single responsibility principle）
クラスは 1 つの責任または役割のみを果たすべき。この原則はモジュール性と関心の分離を促進し、クラスの機能を変更または拡張する際に、システムの他の部分に影響を与えずに容易に行えるようにする。

O: 開放/閉鎖原則（open/closed principle）
OCP とは、ソフトウェアの実体（クラス、モジュール、関数など）は、拡張に対してはオープンであるが、変更に対してはクローズであるべきであるというもの。
新しい要求が生じたとき、あるいはシステムを拡張する必要が生じたとき、既存のコードを変更するのではなく、新しいコードを追加することで拡張できるようにする必要がある。
このアプローチは、バグの導入や既存の機能の破壊のリスクを最小限に抑えるのに役立つ。これは、継承や組み合わせを通じて拡張できる明確で安定したインターフェースを持つソフトウェアモジュールを設計することで部分的に達成される。

L: リスコフ置換原則（liskov substitution principle）
スーパークラスのオブジェクトは、プログラムの正しさに影響を与えることなく、サブクラスのオブジェクトと置き換えることができるべきである。
これは、サブクラスがスーパークラスのすべての動作を継承しているため、シームレスに置き換えることができる必要があるため。

一般的に、多くの人は「正方形は特殊な長方形である」と捉えるため、正方形を長方形のサブクラスとしてモデリングしようと考えるかもしれない。
しかし、LSP の観点からこのモデリングは問題を持つ可能性がある。長方形クラスには「幅」と「高さ」の 2 つのプロパティがあり、それぞれを設定できるとする。
正方形は四辺がすべて等しいので、幅または高さのどちらかを変更すると、もう一方も同じ値になる必要がある。もし正方形を長方形のサブクラスとして実装してしまうと、以下のような問題が発生する。

長方形のインスタンスとして正方形を置き換えた場合、幅を変更しても高さが変わらないという長方形の振る舞いを期待するかもしれない。
しかし、正方形の実装では、幅を変更すると高さも変わるため、この期待は裏切られる。逆に、正方形のインスタンスの場所で長方形を使用すると、幅と高さが常に一致することを期待することができない。

このような振る舞いの違いのため、正方形を長方形のサブクラスとして扱うことは LSP に違反する可能性が高くなる。この例から、親クラスの振る舞いの期待を子クラスが裏切ると、継承が正しくない場合があることがわかる。

I: インターフェース分離の原則（interface segregation principle）
インターフェースを一貫性があり、特定のタスクに焦点を当てて保つことの重要性を強調する原則。これにより、クライアントは使用しないメソッドに依存するよう強制されるべきではなく、インターフェースはできるだけ特定的で最小限に設計されるべきだとされている。
目的は、使いやすく、維持しやすいインターフェースを作成すること。インターフェースのメソッドの数を最小限にすることで、クライアントがインターフェースを理解し、使用するのが容易になる。

例えば、プリンタを使って文書を印刷するソフトウェアシステムを設計していると想像する。プリンタインタフェースには、print()、scan()、copy()、fax() などのメソッドが用意されている。
しかし、プリンタインターフェースのすべてのクライアントが、これらのメソッドをすべて必要とするわけではない。
例えば、文書を印刷するために print() メソッドだけを必要とするクライアントもあれば、文書のコピーを作成するために copy() メソッドを必要とするクライアントもある。

プリンタインタフェースが ISP を意識して設計されていない場合、インタフェースのすべてのクライアントが、たとえそれらを必要としなくても、すべてのメソッドを実装しなければならないことになる。
これは不必要な複雑化を招き、エラーやバグのリスクを高めることになります。一方、ISP を意識したプリンタインタフェースであれば、各クライアントに必要なメソッドのみを実装することになり、使い勝手やメンテナンスが容易になる。
結果として、print() メソッドのみ必要な場合、その関数だけ定義する Printable インターフェース作成する。

D: 依存性逆転の原則の原則（dependency inversion principle）
高レベルのモジュールが具体的な実装よりも抽象に依存すべきだとする原則。これにより、高レベルと低レベルのモジュールの結合度を低くすることができ、低レベルのモジュールを変更しても高レベルのモジュールに影響を与えにくくなる。
この原則を実現するための方法の一つは、抽象を表すインターフェースを作成すること。高レベルのモジュールは、そのインターフェースの特定の実装よりもインターフェース自体に依存することができ、具体的なクラスやサブクラスではなく、抽象クラスや親クラスに依存することもできる。

例えば、Calculator を考えてみる。最も基本的な Calculator クラスでは、足し算や引き算の操作がありますが、新しい操作、例えば掛け算を追加したい場合、現在の Calculator クラスを変更する必要がある。
これを実現するために、Calculator クラスをリファクタリングして、ICalculatorOperation というインターフェースを使用するようにする。
そして、具体的な操作のためのクラス（AddCalculatorOperation や SubtractCalculatorOperation など）を作成して、ICalculatorOperation インターフェースを実装する。
この方式で、Calculator クラスを変更せずに新しい操作を追加することができる。