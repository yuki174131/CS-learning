ソフトウェアの全体または一部について考える場合、要件を明確にし、それを満たすために実装される設計を作成することが重要。
問題を理解し、解決策を計画し、計画を実行し、結果を正確性の観点で検証する必要がある。これがソフトウェア開発プロセスである。

要件（requirement）とは、ソフトウェアシステムや製品が何をすべきかを記述したもので、ユーザーや利害関係者のニーズを満たすためにシステムや製品が提供しなければならない特徴や機能、能力などが含まれる。
要件は、機能要件、非機能要件、設計要件など、さまざまな種類に分類することができる。

機能要件（functional requirement）は、システムが行うべきことや実行できる具体的なアクションを説明する。
例えば、ユーザーが記録を作成、編集、または削除したり、レポートを生成したりできることなど。

一方、非機能要件（non-functional requirement）は、システムがどれだけ優れたパフォーマンスを発揮すべきかや品質に関する属性を説明する。
セキュリティ、信頼性、使いやすさ、パフォーマンス、拡張性などがこれに該当する。

以下は、要件を作成する際に従うべきテンプレートの例。

背景
プロジェクトがどのように始まり、どのようにビジネスニーズやサービスが特定されるに至ったかを説明。

目的
システムの目的は何か、何が達成されるのか、製品がどのように使用されるのかを説明。

機能要件仕様書
システムが持つ機能要件を列挙したもの。

非機能要件仕様書
システムが持つ非機要件のリスト。

プロジェクトが進むにつれて、関係者の要望も明らかになり、要件も変わったり新しくなることがある。
要件はただの固定的なルールと思わず、プロジェクトのゴールを示す指針として使用。

ソフトウェアの目的や機能、操作方法が定まったら、次はソフトウェアの設計をする段階になる。この時、ソフトウェアの見た目や動きを詳しく考え、その設計のための模型を作る。
このために、2 種類の図を描く必要がある。

ワイヤーフレーム
ソフトウェアやアプリの画面レイアウトや機能の初期デザインを表すもの。これにより、デザイナーや開発者は、ソフトウェアの構造や流れをイメージしやすくなる。
ワイヤーフレームは手書きのスケッチやホワイトボード、デジタルツールなどで作成できる。主に、ボタンやメニュー、テキストフィールドといったUIの要素を基本的な図形や線で示す。
さらに、機能の詳細や動きについてのメモや注釈が付けられることもある。


要件モデル
これは、要件をソフトウェア設計の形に落とし込むための図。この図はソフトウェア計画の初めての技術的な描写となり、規模や予算に合わせて、より具体的な部分、例えば機能やクラスのレベルまで詳しく描かれることもある。
この図はソフトウェアの目的を示すものですが、具体的にどう動くのかの全ては表していない。図を見ることで、システム内での相互作用、システムが扱うオブジェクトや、システムの持つ機能や動きがどういったものかが分かるようになっている。

作成する図の例としては、以下のようなものがある。

ユースケース図
ユースケース図は、システムの主な機能や行動を示す図。システムの使用者（アクター）と、そのアクターがシステムでできること（ユースケース）がわかりやすく描かれている。
例えば、オンラインショッピングサイトの場合、アクターは「顧客」で、ユースケースは「商品検索」や「商品購入」など。この図を見れば、サイトの機能がすぐに理解できる。

クラス図
クラス図は、ソフトウェアの各部品を見やすく示す図。この図には、システム内のクラスやその属性、機能、そしてどのように繋がっているかが描かれている。
これを使うと、開発者はシステムの構造を理解しやすくなり、設計や整理に役立ちます。クラス図はソフトウェアの設計図のようなもの。

アクティビティ図
アクティビティ図とは、システム内でのアクションやタスクの流れを示す視覚的な表現。システム内で発生するすべてのアクティビティ、選択が行われる決定点、異なるアクティビティをつなぐ遷移が表示される。

シーケンス図
シーケンス図は、システムのオブジェクト間の相互作用を時間経過とともに説明するもの。オブジェクト間でメッセージが交換される順序や、システム内で発生するイベントの順序を示すもの。
https://gyazo.com/86e0ecc74b1e4d8a46d2fdf79caa1fda

状態図
状態図は、オブジェクトの可能な状態や、それらの状態の変わり目にあたるイベント、そしてその変化の際の行動を示す図。これを使うと、オブジェクトがどんな条件でどう変わるかや、システムがどのように動くかを簡単に理解できる。

