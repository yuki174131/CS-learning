クラス間の関係は、所有権とそれらの所有権がどの程度続くかという寿命を通じて詳細に探求することが可能である。

集約（aggregation）は、あるクラス A がその状態の一部としてクラス B を含む形の関連を示す。
つまり、クラス A はクラス B の所有者となる。この文脈において、クラス A は集約する側となり、クラス B は集約される側となる。

ただし、集約によって得られる情報は、インスタンスの寿命についての詳細を提供するまでには至らない。
具体的には、クラス A がクラス B の所有者であるという関係性において、オブジェクト A がメモリから削除された場合に、
オブジェクト B もそれに伴って削除されるのか、それとも独立してメモリ内に存続するのかという区別を確定することができない。

一方、コンポジション（composition）は、集約の特殊な形態で、ここでは集約されるオブジェクトが集約するオブジェクトに対して依存性を持る。
コンポジションでは、所有者が完全な支配権を持つため、集約先のオブジェクトはそれ自体で存在することはできない。
これは、クラス A とクラス B の間にコンポジションが適用されている場合、クラス A は B の所有者であり、オブジェクト A が消滅すれば、オブジェクト B も同様に消滅する。

以下のケースでは、Person と Wallet の間には集約の関係がある。Person オブジェクトは Wallet の所有者で、Person は Wallet を集約し、Wallet は Person オブジェクトによって集約される。
しかし、仮に Person オブジェクトがメモリから削除されたとしても、Wallet はメモリ上に独立して存在し続けることができる。
これは、Person と Wallet の間に明確な寿命の関連性が定められていないためである。

class Wallet{
    private int bill1;
    private int bill5;
    private int bill10;
    private int bill20;
    private int bill50;
    private int bill100;

    public Wallet(){}

    public int getTotalMoney(){
        return (1*bill1) + (5*bill5) + (10*bill10) + (20*bill20) + (50*bill50) + (100*bill100);
    }

    public int insertBill(int bill, int amount){
        switch(bill){
            case(1):
                bill1 += amount;
                break;
            case(5):
                bill5 += amount;
                break;
            case(10):
                bill10 += amount;
                break;
            case(20):
                bill20 += amount;
                break;
            case(50):
                bill50 += amount;
                break;
            case(100):
                bill100 += amount;
                break;
            default:
                return 0;
        }

        return bill*amount;
    }
}

class Person{
    private String firstName;
    private String lastName;
    private int age;
    private double heightM;
    private double weightKg;

    // PersonクラスはWalletクラスを持ちます。これは集約関係を示しています
    private Wallet wallet;

    public Person(String firstName, String lastName, int age, double heightM, double weightKg){
        this.firstName = firstName;
        this.lastName = lastName;
        this.age = age;
        this.heightM = heightM;
        this.weightKg = weightKg;

        // Personオブジェクトが作成されるときに、新たなWalletオブジェクトも作成されます。
        // しかし、Personオブジェクトが削除された場合、Walletオブジェクトは残ることができます。これが集約を表します。
        this.wallet = new Wallet();
    }

    public int getCash(){
        if(this.wallet == null) return 0;
        return this.wallet.getTotalMoney();
    }

    public int receiveBill(int bill, int amount){
        return this.wallet.insertBill(bill, amount);
    }

    // Walletをnullに設定し、落としたwalletを返します。
    // この操作により、PersonオブジェクトからWalletオブジェクトが切り離されますが、Walletオブジェクト自体は依然として存在します。
    // PersonとWalletの間の集約関係を示しています。
    public Wallet dropWallet(){
        Wallet w = this.wallet;
        this.wallet = null;
        return w;
    }

    // Walletを追加するメソッド。
    // PersonとWalletの間の集約関係を示しています。
    public void addWallet(Wallet wallet){
        if(this.wallet == null) this.wallet = wallet;
    }

    public void printState(){
        System.out.println("firstname - " + this.firstName);
        System.out.println("lastname - " + this.lastName);
        System.out.println("age - " + this.age);
        System.out.println("height - " + this.heightM);
        System.out.println("weight - " + this.weightKg);
        System.out.println("Current Money - " + this.getCash());
        System.out.println();
    }
}

class Main{
    public static void main(String[] args){

        // 全てのPersonはWalletを持つ可能性があります。
        Person ryu = new Person("Ryu","Poolhopper", 40, 180, 1.40);
        ryu.printState();

        // ryuへの支払い
        ryu.receiveBill(20,5);
        ryu.receiveBill(100,50);
        System.out.println("Ryu money: " + ryu.getCash());

        // ryuのWalletを落とします。ryuのWalletをnullに設定し、元のWalletを返します。
        // この時点で、ryuオブジェクトとryuWalletオブジェクトの関連性が切断されますが、ryuWalletオブジェクトは存在し続けます。
        Wallet ryuWallet = ryu.dropWallet();
        System.out.println("Ryu money: " + ryu.getCash());

        // 新しいPersonを作成します。ryuは死亡します。
        System.out.println();
        System.out.println("Killing ryu and creating a new person.");
        ryu = null;
        Person tom = new Person("Tom","Poolhopper", 55, 1.70, 155);

        tom.printState();
        System.out.println("Persons and wallets have an aggregation relationship. A wallet may continue to live without a person.");
        
        tom.dropWallet();

        // 新しいPersonオブジェクトtomを作成し、落とされたryuのWalletをtomに追加します。
        // これにより、ryuWalletオブジェクトは新たにtomオブジェクトと関連付けられます。
        // これもまた、PersonとWalletの間の集約関係を示しています。
        tom.addWallet(ryuWallet);
        System.out.println("Tom money: " + tom.getCash());
    }
}

次に、住所モデルを追加する。一つの住所に複数の人が住んでいると考えると、これも集約の一形態である。
そのため、住所がある一つの Person オブジェクトが削除されたとしても、住所エンティティ自体は他の Person オブジェクトによって生き続けることができる。

class Wallet{
    private int bill1;
    private int bill5;
    private int bill10;
    private int bill20;
    private int bill50;
    private int bill100;

    public Wallet(){}

    public int getTotalMoney(){
        return (1*bill1) + (5*bill5) + (10*bill10) + (20*bill20) + (50*bill50) + (100*bill100);
    }

    public int insertBill(int bill, int amount){
        switch(bill){
            case(1):
                bill1 += amount;
                break;
            case(5):
                bill5 += amount;
                break;
            case(10):
                bill10 += amount;
                break;
            case(20):
                bill20 += amount;
                break;
            case(50):
                bill50 += amount;
                break;
            case(100):
                bill100 += amount;
                break;
            default:
                return 0;
        }

        return bill*amount;
    }
}

class Person{
    private String firstName;
    private String lastName;
    private int age;
    private double heightM;
    private double weightKg;
    private Wallet wallet;

    // ここでAddress型のフィールドが追加されました。一つのPersonと一つのAddressが関連付けられ、これが集約を示します。
    private Address address;

    // 住所(address)もPersonと集約されています。
    public Person(String firstName, String lastName, int age, double heightM, double weightKg, Address address){
        this.firstName = firstName;
        this.lastName = lastName;
        this.age = age;
        this.heightM = heightM;
        this.weightKg = weightKg;
        this.wallet = new Wallet();
        this.address = address;
    }

    public int getCash(){
        if(this.wallet == null) return 0;
        return this.wallet.getTotalMoney();
    }

    public int receiveBill(int bill, int amount){
        return this.wallet.insertBill(bill, amount);
    }

    public Wallet dropWallet(){
        Wallet w = this.wallet;
        this.wallet = null;
        return w;
    }

    public void addWallet(Wallet wallet){
        if(this.wallet == null) this.wallet = wallet;
    }

    public void printState(){
        System.out.println("firstname - " + this.firstName);
        System.out.println("lastname - " + this.lastName);
        System.out.println("age - " + this.age);
        System.out.println("height - " + this.heightM);
        System.out.println("weight - " + this.weightKg);
        System.out.println("Current Money - " + this.getCash());
        System.out.println("Address - " + this.address);
        System.out.println();
    }
}

class Address{
    private String address;
    private String city;
    private String country;

    public Address(String address, String city, String country){
        this.address = address;
        this.city = city;
        this.country = country;
    }

    public String toString(){
        return this.address + " ," + this.city + " " + this.country;
    }
}

class Main{
    public static void main(String[] args){

        // 一つの住所に複数のPersonが関連付けられています。これはAddressとPerson間の集約を示します。
        Address house = new Address("Baker street 9 120", "Seatle", "United States");
        Person ryu = new Person("Ryu","Poolhopper", 40, 1.80, 140, house);
        Person tom = new Person("Tom","Poolhopper", 55, 1.40, 125, house);
        Person martha = new Person("Martha","Poolhopper", 55, 1.70, 105, house);

        ryu.printState();
        tom.printState();
        martha.printState();

        tom = null;
        martha = null;

        // tomとmarthaのオブジェクトが削除されても、その住所（house）は存在し続けます。これはAddressとPerson間の集約を示します。
        System.out.println(house);
    }
}


コンポジションの例

コンポジションは、一つのクラスが他のクラスの一部となる関係を指します。これは「持つ」または「一部である」関係でした。
例えば、Person は名前とBMI（体格指数）を持っていると考えてみる。これらの要素は、Person が存在する限り、それと一緒に存在する。
したがって、Person クラスは Name クラスと BMI クラスから「合成」されます。

逆に Wallet クラスと Address クラスは、Person クラスに「集約」されている。
これらのクラスは Person クラスの一部とは言えず、Person オブジェクトが消去されても、それらのオブジェクトは独立して存在し続けることができます。

class Wallet{
    private int bill1;
    private int bill5;
    private int bill10;
    private int bill20;
    private int bill50;
    private int bill100;

    public Wallet(){}

    public int getTotalMoney(){
        return (1*bill1) + (5*bill5) + (10*bill10) + (20*bill20) + (50*bill50) + (100*bill100);
    }

    public int insertBill(int bill, int amount){
        switch(bill){
            case(1):
                bill1 += amount;
                break;
            case(5):
                bill5 += amount;
                break;
            case(10):
                bill10 += amount;
                break;
            case(20):
                bill20 += amount;
                break;
            case(50):
                bill50 += amount;
                break;
            case(100):
                bill100 += amount;
                break;
            default:
                return 0;
        }

        return bill*amount;
    }
}

class Name{
    private String firstName;
    private String lastName;

    public Name(String firstName, String lastName){
        this.firstName = firstName;
        this.lastName = lastName;
    }

    public String toString(){
        return this.firstName + " " + this.lastName;
    }
}

class BMI{
    private double heightM;
    private double weightKg;

    public BMI(double heightM, double weightKg){
        this.heightM = heightM;
        this.weightKg = weightKg;
    }

    // BMIの値を計算して返すメソッド
    public double getValue(){
        return this.weightKg/(this.heightM*this.heightM);
    }

    public String toString(){
        return this.heightM + " meters, " + this.weightKg + "kg, BMI:" + this.getValue();
    }
}

// PersonはNameとBMIから構成されます。
class Person{
    // Nameオブジェクトを参照。コンポジションの一部
    private Name name;
    private int age;
    // BMIオブジェクトを参照。コンポジションの一部。
    private BMI bmi;
    private Wallet wallet;
    private Address address;

    // Personクラスのコンストラクタ。ここでNameとBMIの新しいインスタンスが作られ、コンポジションが形成されます。
    public Person(String firstName, String lastName, int age, double heightM, double weightKg, Address address){
        this.name = new Name(firstName, lastName);
        this.age = age;
        this.bmi = new BMI(heightM, weightKg);
        this.wallet = new Wallet();
        this.address = address;
    }

    public int getCash(){
        if(this.wallet == null) return 0;
        return this.wallet.getTotalMoney();
    }

    public int receiveBill(int bill, int amount){
        return this.wallet.insertBill(bill, amount);
    }

    public Wallet dropWallet(){
        Wallet w = this.wallet;
        this.wallet = null;
        return w;
    }

    public void addWallet(Wallet wallet){
        if(this.wallet == null) this.wallet = wallet;
    }

    public void printState(){
        System.out.println("Name - " + this.name);
        System.out.println("age - " + this.age);
        System.out.println("height and weight - " + this.bmi);
        System.out.println("Current Money - " + this.getCash());
        System.out.println("Address - " + this.address);
        System.out.println();
    }
}

class Address{
    private String address;
    private String city;
    private String country;

    public Address(String address, String city, String country){
        this.address = address;
        this.city = city;
        this.country = country;
    }

    public String toString(){
        return this.address + " ," + this.city + " " + this.country;
    }
}

class Main{
    public static void main(String[] args){
        Address house = new Address("Baker street 9 120", "Seatle", "United States");
        Person ryu = new Person("Ryu","Poolhopper", 40, 1.8, 90, house);
        Person tom = new Person("Tom","Poolhopper", 55, 1.75, 85, house);
        Person martha = new Person("Martha","Poolhopper", 55, 1.7, 105, house);

        ryu.printState();
        tom.printState();
        martha.printState();

        // これらのPersonオブジェクトが削除されると、BMIやNameオブジェクトも一緒に削除されることになります。
        tom = null;
        martha = null;

        // marthaやtomのBMIや名前にアクセスする方法はもうありません。tomとmarthaはコンポジションオブジェクトと一緒にガーベジコレクタされました。
    }
}

UML 図では、集約は空のダイヤモンドで、コンポジションは塗りつぶされたダイヤモンドで示される。
これにより、一目でクラス間の関係を理解することができる。以下の Person クラスの UML 図では、空のダイヤモンドで Wallet クラスと Address クラスへのリンクを示し、
塗りつぶされたダイヤモンドで Name クラスと BMI クラスへのリンクを示す。
https://gyazo.com/1dcb7ade6b2b2dd68f52dc4187c614d3