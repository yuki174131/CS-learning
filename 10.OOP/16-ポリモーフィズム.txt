継承の概念を使うと、例えば、Animal というスーパークラスから派生したすべての哺乳類が Animal のメソッドを受け継ぐことができる。
つまり、Animal が持つすべてのメソッドは、牛など特定の哺乳類を表すサブクラスにも適応することができる。
これは、哺乳類が「Animal である」という継承関係（is-a 関係）によるもの。
これは、「サブクラスは特殊な形のスーパークラスである」という概念につながる。たとえば、「従業員」は特殊な「人」であるという関係性がこれに該当する。

この現象はポリモーフィズム（polymorphism）と呼ばれる。
ポリモーフィズム（多態性）はオブジェクト指向プログラミングの基本的な概念の一つで、その名前が示す通り、多くの形（poly は多く、morph は形を意味します）を取ることができる。
これは、親クラスの参照変数が子クラスのオブジェクトを参照することができるという性質を示している。言い換えると、一つの型（親クラス）に対して、多くの形（子クラス）を持つことができる。

ポリモーフィズムは、サブクラスがスーパークラスのすべてのメソッドと変数を受け継ぐことを保証し、これがプログラムのコンパイラによってチェックされるため、
プログラムが実行される前にサブクラスがどのような機能を持つかを事前に確認することができる。

スーパークラス型のオブジェクトが必要で、その要求をサブクラス型のオブジェクトが満たす場合も、これはポリモーフィズムの一例。
ポリモーフィズムとは、あるオブジェクトがスーパークラスと同じ形を取る一方で、別のオブジェクトとしての特性も持つ能力を指す。
https://gyazo.com/b237549f0ba9ff7ff9672bda495bdd14

例えば、Animal クラス向けに定義された weightInSpace() という関数があるとする。
この関数の引数は一般的に Animal と指定されているため、関数内部では Animal として利用可能なすべてのメソッドを使うことができる。
weightInSpace() 関数を呼び出す際には、Animal クラスのインスタンスを引数として渡すことも、Animal を継承したサブクラスのインスタンスを引数として渡すことも可能。

つまり、鶏や哺乳類、人間など、どの Animal のサブクラスを渡しても問題ない。
それは、プログラミング言語がこれらのサブクラスが根本的には Animal であり、追加の特性や行動を除けば、すべてが Animal と同じ性質と行動を持つと認識しているからである。
import java.util.Date;
import java.text.SimpleDateFormat;

class BMI{
    private double heightM;
    private double weightKg;

    public BMI(double heightM, double weightKg){
        this.heightM = heightM;
        this.weightKg = weightKg;
    }

    public double getWeightKg(){
        return this.weightKg;
    }

    public double getValue(){
        return this.weightKg/(this.heightM*this.heightM);
    }

    public String toString(){
        return this.heightM + " meters, " + this.weightKg + "kg, BMI:" + this.getValue();
    }
}

class Animal{
    protected String species;
    protected BMI bmi;
    protected double lifeSpanDays;
    protected String biologicalSex;
    protected Date spawnTime;
    protected Date deathTime;
    protected int hungerPercent = 100;
    protected int sleepPercent = 100;

    public Animal(String species, double heightM, double weightKg, double lifeSpanDays, String biologicalSex){
        this.species = species;
        this.bmi = new BMI(heightM, weightKg);
        this.lifeSpanDays = lifeSpanDays;
        this.biologicalSex = biologicalSex;
        this.spawnTime = new java.util.Date();
    }

    public void eat(){
        if(!this.isAlive()) return;
        this.hungerPercent = 0;
    }

    public void setAsHungry(){
        if(!this.isAlive()) return;
        this.hungerPercent = 100;
    }

    public boolean isHungry(){
        return this.hungerPercent >= 70;
    }

    public void sleep(){
        if(!this.isAlive()) return;
        this.sleepPercent = 0;
    }

    public void setAsSleepy(){
        if(!this.isAlive()) return;
        this.sleepPercent = 100;
    }

    public boolean isSleepy(){
        return this.sleepPercent >= 70;
    }

    public void die(){
        this.sleepPercent = 0;
        this.hungerPercent = 0;
        this.deathTime = new java.util.Date();
    }

    public boolean isAlive(){
        return this.deathTime == null;
    }

    public String toString(){
        return this.species + this.bmi + " lives " + this.lifeSpanDays + " days/" + "gender:" + this.biologicalSex + "." + this.status();
    }

    public String status(){
        return this.species + " status:" + " Hunger - " + this.hungerPercent + "%, " + "sleepiness:"+this.sleepPercent + "%" + ", Alive - " + this.isAlive() + ". First created at " + this.dateCreated();
    }

    public String dateCreated(){
        return new SimpleDateFormat("MM/dd/yyyy HH:mm:ss").format(this.spawnTime);
    }
}

class Mammal extends Animal{
    private double furLengthCm;
    private String furType;
    private int toothCounter;
    private double bodyTemperatureC;
    private double avgBodyTemperatureC;
    private boolean mammaryGland = false;

    private boolean sweatGland = true;
    private boolean isPregnant = false;

    public Mammal(String species, double heightM, double weightKg, double lifeSpanDays, String biologicalSex, double furLengthCm, String furType, double avgBodyTemperatureC){

        super(species, heightM, weightKg, lifeSpanDays, biologicalSex);

        this.furLengthCm = furLengthCm;
        this.furType = furType;

        this.mammaryGland = (biologicalSex == "female");

        this.avgBodyTemperatureC = avgBodyTemperatureC;
        this.bodyTemperatureC = this.avgBodyTemperatureC;
    }

    public void sweat(){
        if(!this.isAlive()) return;

        if(this.sweatGland) System.out.print("Sweating....");
        this.bodyTemperatureC-=0.3;
        System.out.print("Body temperature is now " + this.bodyTemperatureC + "C");
        System.out.println();
    }

    public void produceMilk(){
        if(!this.isAlive()) return;

        if(this.isPregnant() && this.mammaryGland) System.out.println("Producing milk...");
        else System.out.println("Cannot produce milk");

        System.out.println();
    }

    public void mate(Mammal mammal){
        if(!this.isAlive()) return;

        if(this.species != mammal.species) return;

        if(this.biologicalSex == "female" && mammal.biologicalSex == "male") this.fertalize();
        else if(this.biologicalSex == "male" && mammal.biologicalSex == "female") mammal.fertalize();
    }

    public void fertalize(){
        if(!this.isAlive()) return;

        this.isPregnant = true;
    }

    public boolean isPregnant(){
        if(!this.isAlive()) return false;

        return this.isPregnant;
    }

    public void bite(){
        if(!this.isAlive()) return;

        System.out.println(this.species + " bites with their single lower jaws which has" +  (this.toothCounter == 0 ? " not" : "")  + " replaced its teeth: " + (this.toothCounter > 0));
        System.out.println();
    }

    public void replaceTeeth(){
        if(!this.isAlive()) return;

        if(this.toothCounter == 0) this.toothCounter++;
    }

    public void increaseBodyHeat(double celcius){
        this.bodyTemperatureC+=celcius;
    }

    public void decreaseBodyHeat(double celcius){
        this.bodyTemperatureC-=celcius;
    }

    public void adjustBodyHeat(){
        this.bodyTemperatureC = this.avgBodyTemperatureC;
    }

    public void move(){
        if(!this.isAlive()) return;
        System.out.println("This mammal is moving.....");
        System.out.println();
    }

    public String toString(){
        return super.toString() + this.mammalInformation();
    }

    public String mammalInformation(){
        return "This is a mammal with the following - "+"fur:"+this.furType+"/teethReplaced:"+(this.toothCounter>0)+"/Pregnant:"+this.isPregnant()+"/Body Temperature:"+this.bodyTemperatureC;
    }

    public void eat(){
        super.eat();
        this.bite();
        System.out.println("this" + this.species + " is eating with its single lower jaw");
    }
}

class Fox extends Mammal{

    public Fox(double heightM, double weightKg, String biologicalSex){
        super("Fox", heightM, weightKg, 1460, biologicalSex, 35, "Fox", 38.7);
    }

    public void howl(){
        System.out.println("Oooooooooooooooowhoo");
    }

    // メソッドの上書き
    public void eat(){
        super.eat();
        System.out.println("This fox is a carnivore");
    }
}

class Main{
    // ここではポリモーフィズムが適用されます。Animalクラスを継承しているオブジェクトであれば、どんな種類のものでも渡すことができることに注意してください。
    // それはそのクラスがAnimalの全てのメンバ変数とメソッドを持つことが保証されているからです。
    public static void animalPolymorphism(Animal animal){
        // Animalの全てのメソッドを呼び出すことができます。
        System.out.println(animal);
        animal.eat();
        System.out.println();

        // ただし、全ての動物が同じ機能を持っているわけではないので、動物のサブクラスの特定のメソッドを呼び出すことはできません。
        // 例えば、キツネは動物であり、遠吠えをすることができます。しかし、全ての動物が遠吠えできるわけではありません。

        // ERROR!!
        // animal.howl();
    }

    public static void main(String[] args){
        Mammal cow = new Mammal("Cattle", 1.8,454.5,730, "female", 1.4, "Cowhide", 32.4);
        animalPolymorphism(cow);

        Animal bullAnimal = new Animal("Cattle", 1.8,454.5,730, "male");
        animalPolymorphism(bullAnimal);

        Fox f1 = new Fox(0.7, 14, "female");
        animalPolymorphism(f1);
    }
}

特定のクラスのインスタンスを作成しながら、より一般的なスーパークラスに対して変数を割り当てることができる。
このような行為はオブジェクトのキャスティング（casting）と呼ばれる。
また、オブジェクトが特定のクラスのインスタンスであるかを確認するために、「instance of」というキーワードを使用することもある。
import java.util.ArrayList;
import java.util.Date;
import java.text.SimpleDateFormat;

class BMI{
    private double heightM;
    private double weightKg;

    public BMI(double heightM, double weightKg){
        this.heightM = heightM;
        this.weightKg = weightKg;
    }

    public double getWeightKg(){
        return this.weightKg;
    }

    public double getValue(){
        return this.weightKg/(this.heightM*this.heightM);
    }

    public String toString(){
        return this.heightM + " meters, " + this.weightKg + "kg, BMI:" + this.getValue();
    }
}

class Animal{
    protected String species;
    protected BMI bmi;
    protected double lifeSpanDays;
    protected String biologicalSex;
    protected Date spawnTime;
    protected Date deathTime;
    protected int hungerPercent = 100;
    protected int sleepPercent = 100;

    public Animal(String species, double heightM, double weightKg, double lifeSpanDays, String biologicalSex){
        this.species = species;
        this.bmi = new BMI(heightM, weightKg);
        this.lifeSpanDays = lifeSpanDays;
        this.biologicalSex = biologicalSex;
        this.spawnTime = new java.util.Date();
    }

    public void eat(){
        if(!this.isAlive()) return;
        this.hungerPercent = 0;
    }

    public void setAsHungry(){
        if(!this.isAlive()) return;
        this.hungerPercent = 100;
    }

    public boolean isHungry(){
        return this.hungerPercent >= 70;
    }

    public void sleep(){
        if(!this.isAlive()) return;
        this.sleepPercent = 0;
    }

    public void setAsSleepy(){
        if(!this.isAlive()) return;
        this.sleepPercent = 100;
    }

    public boolean isSleepy(){
        return this.sleepPercent >= 70;
    }

    public void die(){
        this.sleepPercent = 0;
        this.hungerPercent = 0;
        this.deathTime = new java.util.Date();
    }

    public boolean isAlive(){
        return this.deathTime == null;
    }

    public void move(){
        if(!this.isAlive()) return;
        System.out.println("This animal just moved...");
    }

    public String toString(){
        return this.species + this.bmi + " lives " + this.lifeSpanDays + " days/" + "gender:" + this.biologicalSex + "." + this.status();
    }

    public String status(){
        return this.species + " status:" + " Hunger - " + this.hungerPercent + "%, " + "sleepiness:"+this.sleepPercent + "%" + ", Alive - " + this.isAlive() + ". First created at " + this.dateCreated();
    }

    public String dateCreated(){
        return new SimpleDateFormat("MM/dd/yyyy HH:mm:ss").format(this.spawnTime);
    }
}

class Mammal extends Animal{
    private double furLengthCm;
    private String furType;
    private int toothCounter;
    private double bodyTemperatureC;
    private double avgBodyTemperatureC;
    private boolean mammaryGland = false;
    private boolean sweatGland = true;
    private boolean isPregnant = false;

    public Mammal(String species, double heightM, double weightKg, double lifeSpanDays, String biologicalSex, double furLengthCm, String furType, double avgBodyTemperatureC){
        super(species, heightM, weightKg, lifeSpanDays, biologicalSex);
        this.furLengthCm = furLengthCm;
        this.furType = furType;
        this.mammaryGland = (biologicalSex == "female");
        this.avgBodyTemperatureC = avgBodyTemperatureC;
        this.bodyTemperatureC = this.avgBodyTemperatureC;
    }

    public void sweat(){
        if(!this.isAlive()) return;
        if(this.sweatGland) System.out.print("Sweating....");
        this.bodyTemperatureC-=0.3;
        System.out.print("Body temperature is now " + this.bodyTemperatureC + "C");
        System.out.println();
    }

    public void produceMilk(){
        if(!this.isAlive()) return;
        if(this.isPregnant() && this.mammaryGland) System.out.println("Producing milk...");
        else System.out.println("Cannot produce milk");
        System.out.println();
    }

    public void mate(Mammal mammal){
        if(!this.isAlive()) return;
        if(this.species != mammal.species) return;
        if(this.biologicalSex == "female" && mammal.biologicalSex == "male") this.fertalize();
        else if(this.biologicalSex == "male" && mammal.biologicalSex == "female") mammal.fertalize();
    }

    public void fertalize(){
        if(!this.isAlive()) return;

        this.isPregnant = true;
    }

    public boolean isPregnant(){
        if(!this.isAlive()) return false;

        return this.isPregnant;
    }

    public void bite(){
        if(!this.isAlive()) return;

        System.out.println(this.species + " bites with their single lower jaws which has" +  (this.toothCounter == 0 ? " not" : "")  + " replaced its teeth: " + (this.toothCounter > 0));
        System.out.println();
    }

    public void replaceTeeth(){
        if(!this.isAlive()) return;

        if(this.toothCounter == 0) this.toothCounter++;
    }

    public void increaseBodyHeat(double celcius){
        this.bodyTemperatureC+=celcius;
    }

    public void decreaseBodyHeat(double celcius){
        this.bodyTemperatureC-=celcius;
    }

    public void adjustBodyHeat(){
        this.bodyTemperatureC = this.avgBodyTemperatureC;
    }

    public void move(){
        if(!this.isAlive()) return;
        System.out.println("This mammal is moving.....");
        System.out.println();
    }

    public String toString(){
        return super.toString() + this.mammalInformation();
    }

    public String mammalInformation(){
        return "This is a mammal with the following - "+"fur:"+this.furType+"/teethReplaced:"+(this.toothCounter>0)+"/Pregnant:"+this.isPregnant()+"/Body Temperature:"+this.bodyTemperatureC;
    }

    public void eat(){
        super.eat();
        this.bite();
        System.out.println("this" + this.species + " is eating with its single lower jaw");
    }
}

class Fox extends Mammal{
    public Fox(double heightM, double weightKg, String biologicalSex){
        super("Fox", heightM, weightKg, 1460, biologicalSex, 35, "Fox", 38.7);
    }

    public void howl(){
        System.out.println("Oooooooooooooooowhoo");
    }

    public void eat(){
        super.eat();
        System.out.println("This fox is a carnivore");
    }
}

// Coordinateクラスは、3次元空間の座標を表現します。
class Coordinate{
    public int x;
    public int y;
    public int z;

    // 座標を指定してCoordinateオブジェクトを生成します。
    public Coordinate(int x, int y, int z){
        this.x = x;
        this.y = y;
        this.z = z;
    }

    // Coordinateオブジェクトを文字列形式で返すためのメソッドです。
    public String toString(){
        return "{x:"+this.x+",y:"+this.y+",z:"+this.z+"}";
    }
}

// Fieldクラスは、多種多様な生物とそれらの位置を管理します。
// creaturesリストはポリモーフィズムを活用して、Animalクラス及びその派生クラスのオブジェクトを格納します。
class Field{
    // フィールドの最大座標値を設定します。
    private static final int MAX_X = 100000;
    private static final int MAX_Y = 40000;
    private static final int MAX_Z = 1000;

    // 生物とそれらの座標を格納するリストを作成します。
    private ArrayList<Animal> creatures;
    private ArrayList<Coordinate> creatureCoordinates;

    // コンストラクタでリストを初期化します。
    public Field(){
        this.creatures = new ArrayList<Animal>();
        this.creatureCoordinates = new ArrayList<Coordinate>();
    }

    // randomlyAddWithDependencyメソッドは、生物をフィールドにランダムな座標で追加します。
    public void randomlyAddWithDependency(Animal creature){
        // 座標はランダムに生成されます。
        Coordinate c = new Coordinate(this.internalRanAlgorithm(1, Field.MAX_X), this.internalRanAlgorithm(1, Field.MAX_Y),this.internalRanAlgorithm(1, Field.MAX_Z));
        // 生物とその座標をリストに追加します。
        this.creatures.add(creature);
        this.creatureCoordinates.add(c);
    }

    // internalRanAlgorithmメソッドは、指定された範囲内でランダムな数値を生成します。
    private int internalRanAlgorithm(int min, int max){
        return (int) (Math.random() * (max - min) + min);
    }

    // toStringメソッドは、フィールド内の全ての生物とその座標を文字列形式で返します。
    public String toString(){
        StringBuffer s = new StringBuffer("");
        for(int i = 0; i < this.creatures.size(); i++){
            s.append(this.creatures.get(i) + " with coordinates: " + this.creatureCoordinates.get(i) + "
");
        }
        return s.toString();
    }
}

class Main{
    // animalPolymorphismメソッドは、Animal型のオブジェクトを引数に取り、その情報を表示し、eatメソッドを呼び出します。
    // もし引数がFox型であれば、そのhowlメソッドも呼び出します。これはオブジェクトのキャスティングと呼ばれるものです。
    public static void animalPolymorphism(Animal animal){
        // Animal型のオブジェクトの情報を表示します。
        System.out.println(animal);
        // Animalのeatメソッドを呼び出します。
        animal.eat();

        // もしanimalがFox型のインスタンスであれば、Fox型にキャストしてhowlメソッドを呼び出します。
        if(animal instanceof Fox) ((Fox) animal).howl();
        System.out.println();
    }

    public static void main(String[] args){
        // 特定の動物を生成します。
        Mammal cow = new Mammal("Cattle", 1.8,454.5,730, "female", 1.4, "Cowhide", 32.4);
        Animal bullAnimal = new Animal("Cattle", 1.8,454.5,730, "male");
        Fox f1 = new Fox(0.7, 14, "female");

        // 各動物に対してポリモーフィズムを試します。
        animalPolymorphism(bullAnimal);
        animalPolymorphism(cow);
        animalPolymorphism(f1);

        Field world = new Field();

        // 新しいフィールドを生成し、動物を追加します。
        world.randomlyAddWithDependency(cow);
        world.randomlyAddWithDependency(bullAnimal);
        world.randomlyAddWithDependency(f1);

        // フィールド内の全ての生物とその座標を表示します。
        System.out.println(world);

        // キツネのデータ型をAnimalに設定します。これによりAnimalの一般的なメソッドしか呼び出すことができません。
        Animal fox2 = new Fox(0.7, 14, "female");
        System.out.println(fox2);

        // fox2はAnimal型なので、howlメソッドは呼び出せません。このコードはエラーになります。
        // fox2.howl();

         // もしfox2がFox型のインスタンスであれば、Fox型にキャストしてhowlメソッドを呼び出します。
        if(fox2 instanceof Fox) ((Fox) fox2).howl();
    }
}

コンパイル時には、オブジェクトが特定のクラスを継承しているかどうかだけを検証し、その結果に基づいて全てのメソッドが実行可能かを判断する。
しかし、継承のチェーン内でどのメソッドを実行するかは、動的バインディングルールによって決まる。

変数を定義する際には、その変数に型を割り当て、その型に対応する任意のクラス、あるいはそのクラスを継承したクラスのオブジェクトをその変数に格納することができる。
メソッドを実行時に呼び出す場合には、動的バインディングが適用される。
https://gyazo.com/452efbfea02faa205d848ceea2c280eb

動的バインディングの例
import java.util.ArrayList;
import java.util.Date;
import java.text.SimpleDateFormat;

class Coordinate{
    public int x;
    public int y;
    public int z;

    public Coordinate(int x, int y, int z){
        this.x = x;
        this.y = y;
        this.z = z;
    }

    public String toString(){
        return "{x:"+this.x+",y:"+this.y+",z:"+this.z+"}";
    }
}

class Field{
    private static final int MAX_X = 100000;
    private static final int MAX_Y = 40000;
    private static final int MAX_Z = 1000;

    private ArrayList<Animal> creatures;
    private ArrayList<Coordinate> creatureCoordinates;

    public Field(){
        this.creatures = new ArrayList<Animal>();
        this.creatureCoordinates = new ArrayList<Coordinate>();
    }

    public void randomlyAddWithDependency(Animal creature){
        Coordinate c = new Coordinate(this.internalRanAlgorithm(1, Field.MAX_X), this.internalRanAlgorithm(1, Field.MAX_Y),this.internalRanAlgorithm(1, Field.MAX_Z));

        this.creatures.add(creature);
        this.creatureCoordinates.add(c);
    }

    private int internalRanAlgorithm(int min, int max){
        return (int) (Math.random() * (max - min) + min);
    }

    public String toString(){
        StringBuffer s = new StringBuffer("");
        for(int i = 0; i < this.creatures.size(); i++){
            s.append(this.creatures.get(i) + " with coordinates: " + this.creatureCoordinates.get(i) + "
");
        }
        return s.toString();
    }
}

class BMI{
    private double heightM;
    private double weightKg;

    public BMI(double heightM, double weightKg){
        this.heightM = heightM;
        this.weightKg = weightKg;
    }

    public double getWeightKg(){
        return this.weightKg;
    }

    public double getValue(){
        return this.weightKg/(this.heightM*this.heightM);
    }

    public String toString(){
        return this.heightM + " meters, " + this.weightKg + "kg, BMI:" + this.getValue();
    }
}

class Animal{
    protected String species;
    protected BMI bmi;
    protected double lifeSpanDays;
    protected String biologicalSex;
    protected Date spawnTime;
    protected Date deathTime;
    protected int hungerPercent = 100;
    protected int sleepPercent = 100;

    public Animal(String species, double heightM, double weightKg, double lifeSpanDays, String biologicalSex){
        this.species = species;
        this.bmi = new BMI(heightM, weightKg);
        this.lifeSpanDays = lifeSpanDays;
        this.biologicalSex = biologicalSex;
        this.spawnTime = new java.util.Date();
    }

    public void eat(){
        if(!this.isAlive()) return;
        this.hungerPercent = 0;
    }

    public void setAsHungry(){
        if(!this.isAlive()) return;
        this.hungerPercent = 100;
    }

    public boolean isHungry(){
        return this.hungerPercent >= 70;
    }

    public void sleep(){
        if(!this.isAlive()) return;
        this.sleepPercent = 0;
    }

    public void setAsSleepy(){
        if(!this.isAlive()) return;
        this.sleepPercent = 100;
    }

    public boolean isSleepy(){
        return this.sleepPercent >= 70;
    }

    public void die(){
        this.sleepPercent = 0;
        this.hungerPercent = 0;
        this.deathTime = new java.util.Date();
    }

    public boolean isAlive(){
        return this.deathTime == null;
    }

    public String toString(){
        return this.species + this.bmi + " lives " + this.lifeSpanDays + " days/" + "gender:" + this.biologicalSex + "." + this.status();
    }

    public String status(){
        return this.species + " status:" + " Hunger - " + this.hungerPercent + "%, " + "sleepiness:"+this.sleepPercent + "%" + ", Alive - " + this.isAlive() + ". First created at " + this.dateCreated();
    }

    public String dateCreated(){
        return new SimpleDateFormat("MM/dd/yyyy HH:mm:ss").format(this.spawnTime);
    }
}

class Mammal extends Animal{
    private double furLengthCm;
    private String furType;
    private int toothCounter;
    private double bodyTemperatureC;
    private double avgBodyTemperatureC;
    private boolean mammaryGland = false;

    private boolean sweatGland = true;
    private boolean isPregnant = false;

    public Mammal(String species, double heightM, double weightKg, double lifeSpanDays, String biologicalSex, double furLengthCm, String furType, double avgBodyTemperatureC){

        super(species, heightM, weightKg, lifeSpanDays, biologicalSex);

        this.furLengthCm = furLengthCm;
        this.furType = furType;

        this.mammaryGland = (biologicalSex == "female");

        this.avgBodyTemperatureC = avgBodyTemperatureC;
        this.bodyTemperatureC = this.avgBodyTemperatureC;
    }

    public void sweat(){
        if(!this.isAlive()) return;
        if(this.sweatGland) System.out.print("Sweating....");
        this.bodyTemperatureC-=0.3;
        System.out.print("Body temperature is now " + this.bodyTemperatureC + "C");
        System.out.println();
    }

    public void produceMilk(){
        if(!this.isAlive()) return;
        if(this.isPregnant() && this.mammaryGland) System.out.println("Producing milk...");
        else System.out.println("Cannot produce milk");
        System.out.println();
    }

    public void mate(Mammal mammal){
        if(!this.isAlive()) return;
        if(this.species != mammal.species) return;
        if(this.biologicalSex == "female" && mammal.biologicalSex == "male") this.fertalize();
        else if(this.biologicalSex == "male" && mammal.biologicalSex == "female") mammal.fertalize();
    }

    public void fertalize(){
        if(!this.isAlive()) return;
        this.isPregnant = true;
    }

    public boolean isPregnant(){
        if(!this.isAlive()) return false;
        return this.isPregnant;
    }

    public void bite(){
        if(!this.isAlive()) return;
        System.out.println(this.species + " bites with their single lower jaws which has" +  (this.toothCounter == 0 ? " not" : "")  + " replaced its teeth: " + (this.toothCounter > 0));
        System.out.println();
    }

    public void replaceTeeth(){
        if(!this.isAlive()) return;
        if(this.toothCounter == 0) this.toothCounter++;
    }

    public void increaseBodyHeat(double celcius){
        this.bodyTemperatureC+=celcius;
    }

    public void decreaseBodyHeat(double celcius){
        this.bodyTemperatureC-=celcius;
    }

    public void adjustBodyHeat(){
        this.bodyTemperatureC = this.avgBodyTemperatureC;
    }

    public void move(){
        if(!this.isAlive()) return;
        System.out.println("This mammal is moving.....");
        System.out.println();
    }

    public String toString(){
        return super.toString() + this.mammalInformation();
    }

    public String mammalInformation(){
        return "This is a mammal with the following - "+"fur:"+this.furType+"/teethReplaced:"+(this.toothCounter>0)+"/Pregnant:"+this.isPregnant()+"/Body Temperature:"+this.bodyTemperatureC;
    }

    public void eat(){
        super.eat();
        this.bite();
        System.out.println("this" + this.species + " is eating with its single lower jaw");
    }
}

class Fox extends Mammal{
    public Fox(double heightM, double weightKg, String biologicalSex){
        super("Fox", heightM, weightKg, 1460, biologicalSex, 35, "Fox", 38.7);
    }

    public void howl(){
        System.out.println("Oooooooooooooooowhoo");
    }

    public void eat(){
        super.eat();
        System.out.println("This fox is a carnivore");
    }
}

// より多くのクラスを作成してください。これらは単に親を継承します。
class Bird extends Animal{
    public Bird(String species, double heightM, double weightKg, double lifeSpanDays, String biologicalSex){
        super(species, heightM, weightKg, lifeSpanDays, biologicalSex);
    }
}

class Rabbit extends Mammal{
    public Rabbit(String species, double heightM, double weightKg, double lifeSpanDays, String biologicalSex, double furLengthCm, String furType, double avgBodyTemperatureC){
        super(species, heightM, weightKg, lifeSpanDays, biologicalSex, furLengthCm, furType, avgBodyTemperatureC);
    }
}

class Main{
    // この関数では、Animalクラスのオブジェクトが引数として渡されます。
    // メソッド呼び出し(animal.eat())では、ランタイム時にオブジェクトの実際のタイプがどのサブクラスであるかを確認します。
    // これが動的バインディングと呼ばれるものです。
    // Javaは動的にeat()メソッドをバインドし、そのメソッドが実装されているクラスを確認します。
    // これにより、適切なメソッドが呼び出され、多態性が実現されます。
    public static void animalPolymorphism(Animal animal){
        System.out.println(animal);
        animal.eat();

        // ここでも動的バインディングが行われますが、さらに「instanceof」演算子が使われています。
        // これは、animalオブジェクトがFoxクラスのインスタンスであるかどうかを確認します。Foxクラスのインスタンスであれば、howlメソッドを呼び出します。
        if(animal instanceof Fox) ((Fox) animal).howl();
        System.out.println();
    }

    public static void main(String[] args){
        // 各クラスのインスタンスを作成
        Mammal cow = new Mammal("Cattle", 1.8,454.5,730, "female", 1.4, "Cowhide", 32.4);
        Animal bullAnimal = new Animal("Cattle", 1.8,454.5,730, "male");
        Fox f1 = new Fox(0.7, 14, "female");
        Bird bird1 = new Bird("Bird", 0.1,2.5,30, "female");
        Rabbit bunny1 = new Rabbit("Bunny", 0.1,5.5,100, "female", 0.9, "Rabbit Fur", 32.4);

        System.out.println("-----polymorphism test START-----");

        // 動的バインディングの例： animalPolymorphismにそれぞれの動物を渡すと、それぞれの動物タイプに応じて適切なeatメソッドが実行されます。
        animalPolymorphism(cow);// Mammalのeat()が呼び出されました。
        animalPolymorphism(bullAnimal);// Animalのeat()が呼び出されました。
        animalPolymorphism(f1); // Foxのeat()が呼び出されました。
        animalPolymorphism(bird1);// Animalのeat()が呼び出されました。
        animalPolymorphism(bunny1);// Mammalのeat()が呼び出されました。
        System.out.println("-----polymorphism test END-----");
        System.out.println();


        Field world = new Field();
        world.randomlyAddWithDependency(cow);
        world.randomlyAddWithDependency(bullAnimal);
        world.randomlyAddWithDependency(f1);
        world.randomlyAddWithDependency(bird1);
        world.randomlyAddWithDependency(bunny1);

        System.out.println(world);

        // sleep()関数を異なるクラスに上書きして動的バインディングを調べ、その関数をanimalPolymorphism内で呼び出してください。
    }
}

