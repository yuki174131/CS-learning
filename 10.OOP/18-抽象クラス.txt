抽象クラス、インターフェースという概念について学び、さらに抽象化を深める。

目指すべきは、抽象化の設計と、クラスが保持すべきメソッドのセットの定義である。
これは UML 図を描くようなもので、直接コードに反映する必要はない。むしろ設計の柔軟性を向上させ、抽象型を作り出すことができる。
抽象化の一例としてリストがある。これは、要素の追加、削除、取得といった操作が可能な順序付きシーケンスの抽象化である。
具体的な実装例としては、固定配列、動的配列、片方向リスト、双方向リスト、特定の走査を持つ二分木などがある。
https://gyazo.com/3b201bc170e725e4cdd107188ec51d4a

その次には、ジェネリクスを通じて、更なる抽象化の方法について学ぶ。
これにより、プログラムの実行前に構文チェックを行いつつ、データのプレースホルダを作成し、より汎用的な抽象化を達成することが可能となる。
これらの学習過程は、オブジェクト指向プログラミングの基礎であるクラスやオブジェクトの定義、そしてカプセル化の理解から始まる。

クラス間の継承関係は、枝分かれした木構造を形成する。木の根となるのは、大抵の場合、汎用的な抽象クラス（abstract class）となる。
この抽象クラスから派生する具象サブクラスは、基本的な機能を拡張し、特化した形を持つことになる。
これにより、根ノードから葉ノードに向かうほど具体性が増し、逆に葉ノードから根ノードに向かうほど抽象性が高まる構造が出来上がる。

抽象クラスとは、一部または全てのメソッドが未実装のクラスのことを指し、具象クラスと対比させる形で理解するとより明確である。
具象クラス（concrete class）はその名の通り、具体的な実装を持つクラスで、全てのメソッドが具体的な振る舞いを定義している。

さらなる理解を深めるために、shapes2D という二次元図形を抽象化したクラスを考えてみる。
このクラスから派生する具象クラスには、正方形、長方形、六角形、円、三角形などがある。これらの図形クラスは、特有の属性（状態）とメソッド（挙動）を有している。
例えば、作成時間（タイムスタンプ）、倍率（multiplier）、境界線の色（border color）、背景色（background color）などの属性があり、
これらは一般的にゲッターやセッターと呼ばれるメソッドを通じてアクセスされる。
https://gyazo.com/2c3536edf2a6776d5b1ddfc6096afdec

さらに、全ての二次元図形は面積（area）、周囲長（perimeter）、説明（description）といった共通の挙動を持つことが期待される。
しかし、面積や周囲長を計算する公式は図形によって異なるため、具体的な計算方法は各具象クラスで実装する必要がある。
ここで重要なのは、抽象クラスが具体的な実装を持たず、一部または全てのメソッドが未実装であるという事実である。
これにより、抽象クラスはインスタンス化することができないが、具体的な振る舞いを持たない一方で、共通の振る舞いや属性の概念を提供する。

UML において、抽象クラスはイタリック体でクラス名を表示することで表現される。
例えば、下図は shape2D という抽象クラスと、それから派生する 3 つの具象クラスを表した UML 図。

https://gyazo.com/98205acf37545d561944c946c2cd08df

Java で書かれたコード、その中でも、特に抽象クラスの定義に注目する。
抽象クラスは、具体的な実装を持たない一部の抽象メソッドを含むクラスで、これらはサブクラスで実装を行う必要がある。
この概念は、オブジェクト指向プログラミングにおける重要なパートの一つである。

抽象クラスを定義するには、abstract というキーワードを使用する。このキーワードは、クラスが全てのメソッドを実装していないこと、
そしてそのクラスのインスタンスを直接作成できないことを示している。
この抽象クラスを用いることで、複数の異なるクラスが共通のインターフェースや動作を共有でき、それぞれが異なる具体的な動作を提供できる。
これにより、コードの再利用性と柔軟性が大幅に向上する。

import java.text.SimpleDateFormat;
import java.util.Date;

// abstractキーワードを用いて抽象クラスを宣言します。
abstract class Shape2D{
    protected double scale = 1;
    protected String borderColor = "black";
    protected String backgroundColor = "white";
    protected Date createdTime;

    // コンストラクタ：オブジェクト生成時に現在時刻を記録します。
    public Shape2D(){
        this.createdTime = new java.util.Date();;
    }

    // ゲッターとセッター：オブジェクトのプロパティ（状態）を取得、変更します。
    public double getScale(){
        return this.scale;
    }

    public void setScale(double scale){
        this.scale = scale;
    }

    public String getBorderColor(){
        return this.borderColor;
    }

    public void setBorderColor(String color){
        this.borderColor = color;
    }

    public String getBackgroundColor(){
        return this.backgroundColor;
    }

    public void setBackgroundColor(String color){
        this.backgroundColor = color;
    }

    // オブジェクトの作成日時を取得します。
    public String getDateCreated(){
        return new SimpleDateFormat("MM/dd/yyyy HH:mm:ss").format(this.createdTime);
    }

    // 抽象メソッド：サブクラスで実装を行う必要があります。
    public abstract String getDescription();
    public abstract double getArea();
    public abstract double getPerimeter();

    // toStringメソッド：オブジェクトの説明と作成日時を文字列として返します。
    public String toString(){
        return this.getDescription() + " created at " + this.getDateCreated();
    }
}

// サブクラス：Square、Rectangle、Circle。抽象クラスShape2Dから継承します。
class Square extends Shape2D{
    protected double l;

    public Square(double l){
        super();
        this.l = l;
    }

    // Shape2Dから継承した抽象メソッドを具体的に実装します。
    public String getDescription(){
        return "This is a square! It contains the length of one side, and all sides are equal.";
    }

    public double getArea(){
        return this.l*this.l;
    }

    public double getPerimeter(){
        return this.l*4;
    }
}

class Rectangle extends Shape2D{
    protected double l;
    protected double h;

    public Rectangle(double l, double h){
        super();
        this.l = l;
        this.h = h;
    }

    // Shape2Dから継承した抽象メソッドを具体的に実装します。
    public String getDescription(){
        return "This is a rectangle! It contains the length and height of a rectangle.";
    }

    public double getArea(){
        return this.l*this.h;
    }

    public double getPerimeter(){
        return 2 * (this.h + this.l);
    }
}

class Circle extends Shape2D{
    protected double r;

    public Circle(double r){
        super();
        this.r = r;
    }

    // Shape2Dから継承した抽象メソッドを具体的に実装します。
    public String getDescription(){
        return "This is a circle! It contains the radius length of the circle.";
    }

    public double getArea(){
        return Math.PI * (this.r*this.r);
    }

    public double getPerimeter(){
        return this.getCircumference();
    }

    // 円周の長さを計算します。
    public double getCircumference(){
        return 2 * Math.PI * this.r;
    }
}

// Pentagonクラスの実装はまだありません。
class Pentagon{};

class Main{
    // shapeの情報を出力するメソッド
    public static void shapePrinter(Shape2D obj){
        System.out.println(obj);
        System.out.println("More data: area- " + obj.getArea() + ", perimeter- " + obj.getPerimeter());
        System.out.println();
    }

    public static void main(String[] args){
        // Shape2Dのオブジェクトを作成します。しかし、Shape2Dは抽象クラスであるため、直接インスタンス化することはできません。
        // 代わりに、Shape2Dを継承した具体的なクラスのオブジェクトを作成し、それらをShape2D型の変数に代入します。
        // これにより、ポリモーフィズム（一つの型に対して複数の形を持たせる特性）が適用されます。
        Shape2D obj1 = new Square(4);
        Shape2D obj2 = new Rectangle(3,5);
        Shape2D obj3 = new Circle(9);

        // 各シェイプの情報を出力します。
        shapePrinter(obj1);
        shapePrinter(obj2);
        shapePrinter(obj3);
    }
}

オブジェクト指向プログラミングにおける抽象クラスの使用には、一連の基本原則が存在する。
これらの原則を把握することで、抽象クラスの利用法をより深く理解し、より効果的なプログラミングが可能となる。

Rule 1
抽象クラスは、Java のようなプログラミング言語における特別なタイプのクラス。
この不完全なメソッドは抽象メソッドと呼ばれ、クラスの中で abstract キーワードが使用される必要がある。

Rule 2
抽象クラスから直接オブジェクトを作成することはできない。抽象クラスのメソッドを使うには、抽象クラスを継承した別のクラスを作る必要がある。
この新しいクラスはしばしば具象クラスと呼ばれる。具象クラスには、抽象クラスの抽象メソッドに足りないコードを含める必要がある。

Rule 3
抽象クラスでは、状態を定義しデフォルト値を割り当てることができる。さらに、状態を初期化するコンストラクタも定義できる。
このコンストラクタは、サブクラスから呼び出されることが一般的である。サブクラスがこれらの状態にアクセスできるように、状態を protected として設定することを推奨する。

Rule 4
特定の言語では、抽象メソッドを持たない抽象クラスを定義することが許可されていることがある。これによって、他のプログラマに、このクラスは親クラスであることを示すことができる。
言い換えれば、サブクラス化することを強制する抽象メソッドがなくても、抽象クラスとして宣言されているという事実は、使用する前にサブクラス化されるべきであるというシグナルである。
こうすることで、コード内の特定のクラスが常に基底クラスとして使用され、オブジェクトを直接作成するために使用されないようにすることができる。
これは良いコーディング設計の一部であり、コードの構造と構成を維持するのに役立つ。

Rule 5
抽象クラスを継承した具象クラスで、すべての抽象メソッドのコードを実装しなかった場合、そのクラスも抽象クラスとなり、オブジェクトを直接作成するために使用することはできない。

Rule 6
具象クラスを継承したサブクラスを作成し、その内部で抽象メソッドを定義するか、親クラスのメソッドを抽象メソッドとして上書きすることで、サブクラスを抽象クラスにすることができる。



最後に、継承のルールは「is-a」の関係を保持する必要がある。これは抽象クラスにも同じく適用される。
例えば、Animal という名前の一般的なクラスを考えてみる。Animal を継承した Mammal という特定のクラスを作ることができる。
Mammal は Animal の一種なので、これは理にかなっています。したがって、Mammal クラスは Animal の一般的な特性をすべて受け継ぐが、独自の特性も持つことができます。

一方、Person は Person の型ではない。名前は人が持つものですが、人は名前の一種ではありません。ですから、Name クラスが Person クラスを継承するのは意味がない。
その代わりに、Person クラスが持つプロパティや属性として Name を含めることができる。
