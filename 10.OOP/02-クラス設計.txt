オブジェクト指向プログラミングでは、全てのデータの形となるものは設計図、つまりクラス（class）というもので定義される。
クラスとは、データがどのような形を持つべきかを指定する設計図のようなものである。

そしてこのクラスに基づいて作られる具体的なデータをオブジェクト、またはクラスのインスタンスと言われる。
オブジェクトを作るという行為を、一般的には「インスタンス化」と呼ぶ。


メンバ変数とメソッドの役割

コンピューティングの世界では、データと関数しかない。
メンバ変数は、オブジェクトが持つデータを表し、オブジェクトの現在の状態を表す。
一方メソッドはオブジェクトが持つ機能、つまりオブジェクトがどのように振る舞うかを定義する。

設計図は、オブジェクトがどのようなメンバ変数とメソッドを持つべきかを明確に指定する。
オブジェクトを作成する際に自動的に実行される特殊なメソッドをコンストラクタと言う。

コンストラクタ関数は、新しいオブジェクトの初期化と設定を行うために使用される。
オブジェクトが作成されるときに実行されるため、クラスのインスタンスかと同時に特定の処理を実行するのに適している。
例えば、オブジェクトのプロパティの初期値を設定したり、必要なリソースを準備したり、他のオブジェクトとの関連性を確立したりする。
オブジェクトの生成時に引数を受け取ることもあり、必要な情報を渡すこともできる。


メモリ割り当て

オブジェクトが作成される時、つまり新しいインスタンスが生成さえれる時には、
そのオブジェクトに必要なメモリがヒープから割り当てられる。
この割り当てられたメモリは、オブジェクトのデータとメソッドを格納するすペーウトして機能する。
作成されたオブジェジュと変数は、オブzジェクト自体のデータが直セル保存されるのではなく、
ヒープ嬢のオブジェクトの場所への参照（メモリアドレス）を保持する。

オブジェクトが不要になった時（オブジェクトへの全ての参照が失われた時）
そのオブジェクトに割り当てられたメモリはガベージコレクションというプロセスによって自動的に解放される。
これにより、不要なメモリ使用を避け、ヒープメモリの効率的な使用を実現する。


ソフトウェアの設計を明確にするため、
UML（Unified Modeling Language）という表記法がよく用いられる。
特にクラスを表現する際には、UMLクラス図と呼ばれるものを使う。

https://gyazo.com/7c3a572ba765c6ab8c50bbe21af0ae5a

上記図の具体的なコードは以下

// RGB24という名前のクラスを作ります。クラスはオブジェクトの設計図のようなものです。
class RGB24{
    // red, green, blueという名前の公開された（public）変数を宣言します。これらは、RGBの色を表します。
    public int red;
    public int green;
    public int blue;

    // Javaでは、コンストラクタはクラス名と同じ名前のメソッドです。
    // オブジェクトは、thisキーワードで自分自身を参照することができます。thisキーワードは、現在のインスタンスのオブジェクトです。メソッドの内部でアクセスすることができます。
    public RGB24(int red, int green, int blue){
        this.red = red;
        this.green = green;
        this.blue = blue;
    }

    // getHexメソッドは、red, green, blueの値を16進数に変換し、それらを連結した文字列を返します。
    public String getHex(){
        String hex = Integer.toHexString(this.red);
        hex += Integer.toHexString(this.green);
        hex += Integer.toHexString(this.blue);

        return hex;
    } 

    // getBitsメソッドは、getHexメソッドで得られた16進数の値を2進数に変換し、その文字列を返します。
    public String getBits(){
        return Integer.toBinaryString(Integer.parseInt(this.getHex(), 16));
    }

    // getColorShadeメソッドは、RGBの値を比較し、最も大きな値を持つ色（またはグレースケール）を決定し、その色の名前を文字列として返します。
    public String getColorShade(){
        if(this.red == this.green && this.green == this.blue) return "grayscale";
        String greatestString = "red";
        int greatest = this.red;

        if(greatest <= this.green){
            greatestString = "green";
            greatest = this.green;
        }

        if(greatest <= this.blue){
            greatestString = "blue";
            greatest = this.blue;
        }

        return greatestString;
    }
}

// Javaプログラムはメインメソッドから実行されます。
class Main{
    public static void main(String[] args){
        // RGB24クラスの新しいインスタンスを3つ作成し、それぞれをcolor1、color2、color3という変数に格納します。
        RGB24 color1 = new RGB24(0, 153, 255);
        RGB24 color2 = new RGB24(255, 153, 204);
        RGB24 color3 = new RGB24(153, 255, 51);

        // 各色の16進数表現、2進数表現、および色をコンソールに出力します。
        System.out.println(color1.getHex() + " <-> " + color1.getBits() + ". Color: " + color1.getColorShade());
        System.out.println(color2.getHex() + " <-> " + color2.getBits() + ". Color: " + color2.getColorShade());
        System.out.println(color3.getHex() + " <-> " + color3.getBits() + ". Color: " + color3.getColorShade());

        // グレースケールの色を表す新しいRGB24インスタンスを作成し、その16進数表現、2進数表現、および色をコンソールに出力します。
        RGB24 gray = new RGB24(123, 123, 123);
        System.out.println(gray.getHex() + " <-> " + gray.getBits() + ". Color: " + gray.getColorShade());
    }
}

クラスはデータ構造の設計図のようなもの。
オブジェクトは他のオブジェクトやプリミティブなデータ型から成り立ち、おのための複合データ構造とも呼ばれる。

新しい RGB24 クラスのインスタンスを作る際には、コンストラクタが呼ばれ、オブジェクトの初期状態が設定される。
このコンストラクタでは、通常の関数と同様に任意の操作を実行したり、入力を受け取ることができる。
ただし、ユーザがクラスのインスタンスを作成したときに必ず実行されるという保証があるため、
状態の初期化には最適な場所である。これが、コンストラクタ関数と通常のメソッドの主な違いとなる。


クラスの設計をする際には、自分自身や他の開発者が後でそのクラスを利用することを考えなければならない。
つまり、クラスが後に新機能を追加できるような「拡張性」を持つこと、そしてクラスのユーザーに影響を与えずにコードを修正・変更できる「リファクタリング」能力を考慮することが必要。

次に、具体的な例として「RGB24」オブジェクトを考えてみる。
このオブジェクトを拡張・リファクタリングして、ユーザーが 16 進数の文字列や 24 ビットの文字列を使って色を設定できるようする。
そして、ユーザーが入力に間違いがあった場合は、自動的に色を黒に設定する。

class RGB24{
    public int red;
    public int green;
    public int blue;

    public RGB24(int red, int green, int blue){
        this.red = red;
        this.green = green;
        this.blue = blue;
    }

    // このコンストラクタは、文字列形式で色を入力できるようにします。
    // 関数のオーバーロードを使用しています。
    // 具体的には、16進数で6文字（例："FF00FF"）または、2進数で24文字（例："111111110000000011111111"）で色を指定できます。
    // 文字列の長さが6または24でなければ、色は黒になります。
    public RGB24(String inputString){
        int l = inputString.length();
        // 長さが6なら16進数と解釈
        if(l == 6) this.setColorsByHex(inputString);
        // 長さが24なら2進数と解釈
        else if(l == 24) this.setColorsByBin(inputString);
        // 長さが6でも24でもなければ黒にする
        else this.setAsBlack();
    }

    // このメソッドは、16進数の色を設定します。
    // 例えば、"FF00FF"を入力とすると、赤255、緑0、青255となります。
    // ただし、文字列の長さが6でなければ、色は黒になります。
    public void setColorsByHex(String hex){
        // 長さが6でなければ黒にする
        if(hex.length() != 6) this.setAsBlack();
        else{
            // 最初の2文字を赤と解釈
            this.red = Integer.parseInt(hex.substring(0,2), 16);
            // 次の2文字を緑と解釈
            this.green = Integer.parseInt(hex.substring(2,4), 16);
            // 最後の2文字を青と解釈
            this.blue = Integer.parseInt(hex.substring(4,6), 16);
        }
    }

    // このメソッドは、2進数の色を設定します。
    // 例えば、"111111110000000011111111"を入力とすると、赤255、緑0、青255となります。
    // ただし、文字列の長さが24でなければ、色は黒になります。
    public void setColorsByBin(String bin){
        // 長さが24でなければ黒にする
        if(bin.length() != 24) this.setAsBlack();
        else{
            // 最初の8文字を赤と解釈
            this.red = Integer.parseInt(bin.substring(0,8), 2);
            // 次の8文字を緑と解釈
            this.green = Integer.parseInt(bin.substring(8,16), 2);
            // 最後の8文字を青と解釈
            this.blue = Integer.parseInt(bin.substring(16), 2);
        }
    }

    // このメソッドは、色を黒（赤0、緑0、青0）に設定します。
    public void setAsBlack(){
        this.red = 0;
        this.green = 0;
        this.blue = 0;
    }

    public String getHex(){
        String hex = Integer.toHexString(this.red);
        hex+=Integer.toHexString(this.green);
        hex+=Integer.toHexString(this.blue);

        return hex;
    }

    public String getBits(){
        return Integer.toBinaryString(Integer.parseInt(this.getHex(), 16));
    }

    // このメソッドは、赤、緑、青の中で一番強い色を判断します。
    // 赤、緑、青が全て同じ値であれば、"grayscale"（グレースケール）を返します。
    // そうでなければ、一番強い色（赤、緑、青）の名前を返します。
    public String getColorShade(){
        // 全ての色が同じなら"grayscale"
        if(this.red == this.green && this.green == this.blue) return "grayscale";
        // 色の名前を保存する配列
        String[] stringTable = new String[]{"red","green","blue"};
        // 色の値を保存する配列
        int[] values = {this.red, this.green, this.blue};

        // 最大値の初期値を赤の値にする
        int max = values[0];
        // 最大値があるインデックスの初期値を0（赤）にする
        int maxIndex = 0;
        // 緑と青をチェックする
        for(int i = 1; i < values.length; i++){
            // 現在の最大値よりも大きければ、その値が新しい最大値になる
            if(max <= values[i]){
                max = values[i];
                // そして、そのインデックスを保存する
                maxIndex = i;
            }
        }
        // 最大値がある色の名前を返す
        return stringTable[maxIndex];
    }

    // 文字列変換メソッドtoString()
    // Javaは、System.out.println(data)関数のように、オブジェクトを文字列に変換する必要がある場合、この関数を自動的に呼び出します。
    // 今回、toStringメソッドはRGB値、16進数表記、2進数表記の情報を含む文字列を返すようにオーバーライドされています。
    public String toString(){
        return "The color is rgb(" + this.red + "," + this.green + "," + this.blue + "). Hex: " + this.getHex() + ", binary: " + this.getBits();
    }
}

class Main{
    public static void main(String[] args){
        RGB24 color1 = new RGB24(0, 153, 255);
        RGB24 color2 = new RGB24("ff99cc"); //rgb(255, 153, 204)
        RGB24 color3 = new RGB24("100110011111111100110011"); //rgb(153, 255, 51)
        RGB24 gray = new RGB24("7b7b7b"); //rgb(123, 123, 123)

        System.out.println(color1);
        System.out.println(color2);
        System.out.println(color3);
        System.out.println(gray);
        
        System.out.println();	
        System.out.println("Changing the state of colors");
        System.out.println();
        
        // 状態の変更
        gray.setAsBlack();
        System.out.println(gray);
        color1.setColorsByHex("2EB656");
        System.out.println(color1);
    }
}
