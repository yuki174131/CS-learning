オブジェクト指向プログラミング（OOP）は、プログラム全体をオブジェクト（状態と振る舞いを持つ要素）として設計する手法。
たとえば、ゲームのキャラクターや自動車などの具体的な「もの」をプログラムの中に作り出し、それらが相互作用することで全体としてのプログラムを構築するというイメージとなる。

一方、手続き型プログラミングは、一連の手順（手続き）に従ってデータを操作するプログラミングの形式。これは、たとえば、レシピに従って料理を作るようなイメージで、一つ一つの手続きがデータ（材料）を変換していく。

※手続き型プログラミングでも「オブジェクト」を用いることは可能であるが、それはデータ構造や関数を束ねるための便利な道具程度。オブジェウトの相互作用によってプログラムが動くという考え方は、基本的にOOPの特徴。

オブジェクト指向プログラミングの特性は、「カプセル化」、「継承」、「ポリモーフィズム」があり、それらをサポートする言語機能が豊富に提供されている。
オブジェクト指向プログラミングのパラダイムをサポートする言語には、クラスの抽象化、インターフェース、メソッドのオーバーロード、メソッドの上書き、動的バインディング（Dynamic binding）、可視性修飾子（Visibility modifiers）、アップキャスト＆ダウンキャスト、不変性、ジェネリクス（Generics）のような機能もある。



