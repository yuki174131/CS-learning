OS は非常に重要なソフトウェアで、ハードウェアとアプリケーションの間に位置する。OS の役割の一つは、ハードウェアの物理的な違いを隠蔽し、コンピュータの内部構造を抽象化すること。
これにより、異なるハードウェア上でも同じアプリケーションを実行できるようになる。

具体例として、コンピュータには HDD や SSD など、さまざまな種類の補助記憶装置がある。これらの違いは OS によって隠蔽され、ユーザーから見ると C ドライブや D ドライブといった形で認識されるようになる。
このようにして、ユーザーは補助記憶装置の種類に関わらず同じように扱うことができる。

OS の機能は、ハードウェアの抽象化だけにとどまらない。コンピュータを安全かつ効率よく動作させるための多岐にわたる機能が備わっている。セキュリティの強化やシステムリソースの管理などがその例。


ブートローダ（boot loader）
コンピュータの電源を入れた後に OS を起動させるプログラム。コンピュータ内には、電源や CPU、メインメモリなどの主要部品をつなげる役割を果たす大きな基板であるマザーボードが存在している。
https://gyazo.com/bd205b85802631b153f4a9b5ca95ced0

コンピュータの電源を入れると最初に、マザーボードの ROM 内に格納された BIOS（UEFI）と呼ばれるプログラムが実行され、各デバイスが初期化される。
その後、接続されているデバイスの中からブートローダがメインメモリに読み込まれ、ブートローダの実行によって OS が起動される。
https://gyazo.com/a0c987f926aecafbdd8fb5591f5480a6


カーネル（kernel）
OS の中核をなすプログラム。具体的には、CPU の管理（プロセス管理、スケジューリング等）、メインメモリの管理、I/O デバイス管理、ファイルシステム管理などが挙げられる。
ユーザーがカーネルに直接触れると、データの不正アクセスやプログラム間の干渉などの問題が起こることがあるため、特別な方法であるシステムコールを通して操作する。
カーネルには、多くの機能を持たせたモノリシックカーネルと、必要最小限の機能しか持たせないマイクロカーネルという 2 種類がある。
これらの間には明確な境界がなく、中間的な構造も存在することがある。

https://gyazo.com/537aa5d5a1dff99d9c4800af0e8679e8


システムコール（system call）
OS の核となる部分であるカーネルの機能を呼び出す特別な命令。これにはさまざまな種類があり、ファイルの操作、プロセスの管理など、コンピュータの基本的な操作を行うために使用される。
システムコールの詳細な情報。
https://linuxjm.osdn.jp/html/LDP_man-pages/man2/syscalls.2.html

システムコールは通常、高級プログラミング言語から直接呼び出すことができない。それを可能にするためには、アセンブリコードと呼ばれる低レベルのプログラミング言語を使用する必要がある。
アセンブリコードは、使用するハードウェアに依存するため、簡単ではない。

アセンブリコードは、コンピュータのプロセッサが直接解釈できる機械語に非常に近い低レベルのプログラミング言語。
プログラマは、アセンブリ言語を用いて、プロセッサに対して非常に具体的で直接的な命令を記述することができる。

アセンブリコードは、使用するプロセッサ（ハードウェア）のアーキテクチャに密接に関連している。
異なるプロセッサアーキテクチャにはそれぞれ異なる命令セットがあるため、あるプロセッサ用に書かれたアセンブリコードは、別のプロセッサでそのまま動作することはほとんどない。

上記のハードウェア依存の性質から、アセンブリコードを使用すると、コードの互換性や可搬性の問題が生じることがよくある。
また、高級言語に比べて直接的で詳細な記述が必要なため、コードを書いたり理解したりするのが一般的には難しい。

しかし、OS がラッパー関数を提供しているため、開発者はハードウェア依存のアセンブリコードの違いを意識せずに、システムコールを利用することができる。
このラッパー関数は、異なるハードウェア上でも同じように動作するように、システムコールの呼び出しを調整する。

Linux では、これらのシステムコールは標準 C ライブラリとして提供されているため、プログラマはコンピュータのアーキテクチャの違いを気にせず、容易にシステムコールを使用することができる。
これにより、効率的で安定したプログラミングが可能。
https://gyazo.com/d291e8e4a1fa048554dd128ed43f7da2


カーネルモードとユーザーモード

カーネルは、コンピュータシステムの中心で、メインメモリの管理や CPU のタスクのスケジューリングなど、システムの基本的な操作を行う。
この操作が不正に行われれば、セキュリティ上の問題が発生する可能性があるため、カーネルモードとユーザーモードの 2 つのモードに分けている。

ユーザーモード
ユーザーモードは、一般のユーザーが使うソフトウェア、アプリケーション、ミドルウェアなどの実行のためのモード。
このモードでは、重要なメモリ領域や I/O デバイスへの直接アクセスが制限されている。これにより、不正な操作や誤操作からシステムを保護する。
安全に処理できるかを確認した後、必要に応じてカーネルモードに切り替え、特権的な操作を行うことができる。

カーネルモード
カーネルモードは、OS が直接使用するモードで、特権モードとも呼ばれる。
ここでは、メモリ管理、デバイスドライバの制御、セキュリティの実装など、システム全体の基本的な操作が可能。
ユーザーモードとは対照的に、アクセス制限がなく、メモリや I/O デバイスに対する操作が完全に自由で、CPU の全命令も実行することができる。
https://gyazo.com/a44a26442c848acc366e6fafd6795a1b


シェル
OS の機能にアクセスするためのインターフェースで、特にコマンドラインから操作するためのソフトウェアツール。
通常のユーザーが OS の中核部分であるカーネルに直接アクセスすることは危険であり、また権限もない。このため、シェルがその仲介役を果たす。

シェルの背後には、システムコールという重要な概念が存在する。システムコールは、プログラムがカーネルの機能にアクセスするための特別な関数や手続き。
シェルを使うことで、ユーザーはこれらのシステムコールを直接書かずに、様々な OS の機能にアクセスできるようになる。
https://gyazo.com/a725402a49d4918976ee13fbb9881056

例えば、ターミナルで mkdir foo と入力すると、シェルはこのコマンドを解釈し、mkdir というプログラムを実行する。
このプログラムは内部で mkdir() というシステムコールを使用し、指定された場所に foo というディレクトリを作成する。ユーザー自身がシステムコールを直接扱う必要はない。
シェルの名前は、カーネルを取り囲むような外殻の役割を果たすことから来ている。カーネルはコンピュータの中核で、直接触れると危険な部分。
しかし、シェルを通じて、安全にカーネルの機能を利用することができる。これによって、ファイル操作やプロセス管理など、OS の高度な操作が手軽に行えるようになっている。


