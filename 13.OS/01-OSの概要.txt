https://gyazo.com/3be950c23e7ea5a65741bd7a77495f86

私たちユーザーがコンピュータを扱う際、ハードウェアやリソースを意識せずに、アプリケーションをインストールしたり、リソースを効率的に扱うことができる。
これが可能なのは、OS がハードウェアを適切に管理し、ユーザーにそれらを意識させずにインターフェースとしての違いを抽象化しているから。
ほとんどのアプリケーションは、OS の提供する API を使用して動作する。これにより、プログラムが OS と直接対話するための道筋を作る。
したがって、開発者にとって OS の内部構造や動作原理を理解することは非常に重要で、効率的なプログラムを作成するための基盤となる。

アプリケーションの開発作業だけでなく、クラウドコンピューティングにおけるノードや OS 内でのスレッドおよびプロセス管理には、特有の課題が存在する。
これらの要素は、デッドロックという問題を引き起こしたり、CDN とキャッシュという共通の概念を持っていたりするため、開発者にとって理解が必要な部分。

OS は、主に 2 つの大きな役割に分けることができる。

1 つはコンピュータ側から見て、リソース管理としての役割、もう 1 つはユーザー側からみて、コンピュータアーキテクチャを意識しない抽象化されたインターフェースとしての役割。


リソース管理

コンピュータには CPU、メモリ、ストレージ、入出力デバイスなどのリソースがあり、OS によって効率的かつ安全な操作が確保される。
これにはプロセス管理、メモリ管理、ファイルシステム管理、ストレージ管理、入出力システム管理などが含まれる。
https://gyazo.com/c8675e0be5fb363ef19418a488a990b7


インターフェース（抽象化）

インターフェースは、ユーザーがコンピュータの構造を意識せずに操作できるようにする役割を果たす。
例えば、このページを開いている際、ユーザーはマウスを操作したり、ボタンをクリックしたりして、ネットワークから情報を取得しながら、モニター上でそれらの操作を同時に見ることができる。

コンピュータの内部では、CPU やストレージ、モニター、マウスなどのハードウェアの違いを考慮せずに、さまざまなプログラムが動作している。
これは、OS がコンピュータの構造を抽象化し、インターフェースとして機能するために実現されている。
https://gyazo.com/c7066a9524bc8d8444902a14b69dd3d4


ノイマン型アーキテクチャ

コンピュータの構造の一つのモデルとして、ノイマン型アーキテクチャ（von Neumann architecture）と呼ばれるものがある。
1940 年代にジョン・フォン・ノイマンによって提案されたこのモデルは、今日のほとんどのコンピュータにおいて、下図に示されるノイマン型のモデルに分類される。
https://gyazo.com/bab54f201f336df7dcc75d2d33f77eb3

ノイマン型アーキテクチャは、以下の 5 つの要素から構成されている。
- 演算装置（arithmetic unit）: 数値や論理計算を行う部分。
- 制御装置（control unit）: コンピュータの操作をコントロールする中心的な部分。
- 主記憶装置（main memory）: 命令やデータを一時的に保存する部分。
- 入力装置（input unit）: キーボードやマウスなどからの情報を受け取る部分。
- 出力装置（output unit）: 画面やプリンタなどに情報を送る部分。
CPU は、ノイマン型アーキテクチャを使用して、事前に主記憶装置（メインメモリ）に格納された命令を一つずつ取り出し、実行することでデータを処理する。
命令をあらかじめメインメモリに格納しておく方法を、プログラム内蔵方式と呼ぶ。また、1 つずつ CPU が命令を取り出して実行することを、逐次制御方式と呼ぶ。

