物理的なメモリ空間のことを物理アドレス空間といい、個々の番地のことを物理アドレスと呼んだ。
一方で各プロセスが占有して扱うことのできるメモリ空間のことを仮想アドレス空間（virtual address space）または論理アドレス空間といい、個々の番地のことを仮想アドレス（virtual address）または論理アドレスという。
https://gyazo.com/b8eaf958cad77c96da6c413241e16f1b

仮想アドレスの設定により、開発者や各プロセスは、他のプロセスが具体的にどこに存在しているのかを気にすることなくアドレスを指定できるようになる。
例えば、プロセスが補助記憶装置に移動されたり、物理アドレスが変更されたりすることを考慮する必要がない。さらに、仮想アドレス空間の大きさは、実際の物理メモリよりも大きくなることがある。
また、各プロセスは物理アドレスを直接指定することができず、各プロセスごとに専用の空間がある。これにより、プロセス A の仮想アドレス 14000 とプロセス B の仮想アドレス 14000 は、それぞれ異なる物理アドレスを指す。
プロセス間でアドレスを共有することはできない。

このような仮想アドレスから物理アドレスへの変換は、CPU 内の特別なハードウェアである MMU（Memory Management Unit）によって行われる。
MMU は、プロセスが物理メモリ上のどこを使うべきかを管理し、仮想アドレスを対応する物理アドレスに効率的に変換する役割を果たす。
https://gyazo.com/6e50afc1420046af1835aa996701dabb

MMU
コンピュータのハードウェアの一部で、仮想アドレスを物理アドレスに変換する役割を果たす。コンピュータのプログラムは、仮想アドレス空間上で実行されるが、実際のデータは物理メモリの中の物理アドレスに保存される。
この仮想アドレスと物理アドレスの対応関係を管理し、変換するのが MMU の主な仕事。
従来のシステムでは、アドレス単位で直接的な対応表を使用して MMU が変換を行っていた。しかし、32 ビットや 64 ビットのシステムでは、仮想アドレス空間が非常に大きくなるため、対応表もそれに比例して巨大になる。
例を挙げると、32 ビットの仮想アドレス空間では、約 43 億の異なるアドレスが存在する。仮に 1 アドレスあたり 4 バイトの情報が必要だとすると、必要な対応表のサイズは 232 × 4 バイト、すなわち 16GB となる。
このような巨大な対応表をプロセスごとに持つのは非常に効率が悪く、メモリリソースを大量に消費してしまう。

この巨大な対応表の問題を解決するために考えられたのが、ページングの技術。ページングは、メモリを固定サイズのページと呼ばれる単位に分割し、仮想アドレスと物理アドレスの対応をページ単位で行う。
これにより、全てのアドレスの対応関係を持つ代わりに、使用されているページだけの対応関係を持つことで、対応表のサイズを大幅に削減できる。


