リソース管理の中でも特に、プロセス（process）という概念は重要。プロセスとは、プログラムのインスタンスのようなもので、実行中のプログラムのことを言う。
プロセスが始まると、メモリが割り当てられ、CPU やメモリ、ファイル、入出力デバイスなどのリソースが使われる。

コンピュータ上でさまざまな作業を行うために、多岐にわたるプロセスが存在する。以下は、具体的なプロセスの例。

OS のプロセス
コンピュータの基本的な操作を制御するためのプロセス。例えば、ファイルシステムの管理、メモリの管理、デバイスの制御などがある。

ユーザーインターフェースのプロセス
ウィンドウシステムやマウス、キーボードの操作を管理するプロセス。

アプリケーションプロセス
これは一般的なユーザーが使用するソフトウェア。例として、Web ブラウザ、テキストエディタ、ゲーム、画像編集ソフトウェアなどが挙げられる。

システムサービスプロセス
OS が提供する機能を実行するプロセスで、ファイルのバックアップ、アップデートのチェック、ネットワークの管理などが含まれる。

コマンドラインプロセス
コマンドラインインターフェースから実行されるプロセスで、シェルスクリプトやバッチファイルなどの自動化されたタスクを処理する。

デーモンプロセス
主に UNIX 系システムで用いられる、バックグラウンドで常に動作しているプロセス。メールサーバ、Web サーバなどが該当する。

プロセスは他のプロセスを生み出すことがよくある。この時、新しく生成する側のプロセスを「親プロセス」とし、生成される側を「子プロセス」と呼ぶ。
Linux では top コマンドによって、実行中のプロセスとリソースの使用率などの一覧を表示できる。具体的に表示される項目は、以下のようになる。

- PID: プロセスに与えられる固有の番号 ID。
- PR: プロセスの優先度。
- S: プロセスの現在の状態。プロセスには、複数の状態がある。
  - D: 入出力の完了待ち状態で、この状態のプロセスは停止できない。
  - R: 実行中、または実行可能な状態のプロセス。CPUを使用している、または使用する予定の状態。
  - S: スリープ状態で、中断が可能な待機状態のプロセス。
  - T: 一時停止状態のプロセス。
  - Z: ゾンビ状態のプロセス。処理は終わっているが、親プロセスによる最終チェックがまだ終わっていないプロセス。

これらの状態は、システムの動作やリソースの使用、プロセス間のコミュニケーション、そしてその他の要因によって以下のように移行することが可能。
https://gyazo.com/b9eabbaf7d3930d7c54c6a4e83334d4d


マルチプロセスと割り込み
OS の役割の 1 つであるリソース管理において、リソースには CPU といった計算資源が含まれる。CPU の空き時間をなるべく減らして、CPU を効率よく利用することが重要。
CPU やメモリなどのリソースは限られているが、複数のプロセスが同時に実行されている。

一般に 1 つの CPU（コア）に対して、1 つのプロセスしか実行することはできない。しかし、複数のプロセスを高速で切り替えることにより、人の認識からは同時に稼働しているように見せることができる。
これを、マルチプロセス（マルチタスク）と呼う。


プロセススケジューラ
複数のプロセスを同時に実行させているように見せかけるには、どのプロセスをどれくらいの時間で、どの CPU で実行させるかという管理をしなければならない。
そのため、適切にプロセスを処理するために、プロセススケジューラ（process scheduler）が使われる。
時間を均等に分配するラウンドロビンスケジューリングなども行われることがありますが、現代の一般的な OS では、優先度に応じて時間配分を調整したり、CFS（Completely Fair Scheduler）のような効率的なタスク分配手法も使用されています。


割り込み
コンピュータが多くのプロセスを高速で切り替えることで、同時に多くの作業をこなしているかのように見せる仕組みをマルチタスクというが、
割り込み（interrupt）はこのマルチタスクの中で、特定のイベントが発生した場合にそのプロセスを一時中断して特別な処理を行う役割を果たす。

割り込みのタイプとして、以下が挙げられます。

ハードウェア割り込み（external interrupt）
外部デバイスやハードウェアからの信号によって引き起こされる。例えば、キーボードの入力やマウスのクリック、プリンタのエラーなどが含まれる。

ソフトウェア割り込み（internal interrupt）
ソフトウェアの動作に基づいて発生します。プログラムのエラー、例外処理、タイマー割り込み（一定時間ごとの処理）などが含まれる。
それぞれ、割り込みの要因を割り込みベクタ（interrupt vector）と呼ばれる番号で管理する。割り込みベクタは、割り込みの要因ごとに固有の番号やアドレスを持つ。
CPU が割り込みを受けると、割り込みベクタを参照して、割り込み処理プログラムの正確な場所へジャンプする。


割り込み処理の流れは、以下のようになる。

- 割り込み信号受信: CPU が割り込み信号を受信。
- 現在の状態保存: 実行中のプロセスの状態（レジスタなど）を保存。
- 割り込み処理プログラム実行: 割り込みベクタに従い、割り込み処理プログラムを実行。
- 状態復元: 割り込み前のプロセスの状態を復元。
- プロセス再開: 中断していたプロセスの処理を再開。


プロセスには、親子関係という重要な概念がある。この親子関係は、プロセスが他のプロセスを生成する際に発生する。
具体的には、プロセスが別のプロセスを生成した際、元のプロセスを「親プロセス」と呼び、新しく作られたプロセスを「子プロセス」と呼ぶ。

OS 上では、プログラムが実行される際にプロセスが形成される。
UNIX 系の OS では、初めに実行されるプロセスとして init がありますが、多くの現代のシステムでは systemd というプロセスがこの役割を果たす。
プロセスは管理のために一意の識別子を持っており、systemd のプロセス ID は通常 1 として割り振られる。

systemd はコンピュータの OS が起動する際に最初に動くプロセスで、他のプログラムやサービスが正しく動作するように管理する役割を果たす。

コンピュータが起動する際、カーネルが最初に動き出す。そして、カーネルが起動すると同時に、init や systemd といった特別なプロセスも始まる。
これらは、システムの基本的なプロセスで、他のすべてのプロセスの「親」となります。通常、子プロセスが終了すると、親プロセスがそれを「回収」して、終了処理を行う。

しかし、何らかの原因で親プロセスが子プロセスを回収できなかった場合、その子プロセスは「ゾンビ状態」となる。
ゾンビ状態とは、プロセスが終了したにもかかわらず、システム上でまだ存在している状態を指す。
このゾンビ状態を解消するため、カーネルが介入します。カーネルは、init や systemd といった基本的なプロセスの子プロセスとして養子縁組さレル。
そして、定期的にゾンビ状態のプロセスを回収し、適切に処理します。このようにして、システムの整合性と効率が保たれる。


プロセスのライフライクル
https://gyazo.com/7b58313a78cef3e7b2a544e768b865a9

親プロセスの子プロセスの生成
親プロセスは fork() 関数を使用して、子プロセスを生成する。この時点で、親プロセスと子プロセスはほぼ同一の内容を持つ。
https://gyazo.com/3fc682084ca12f2786dbadde7a84a76c

子プロセスの完了の待機
親プロセスは wait() 関数を用いることで、子プロセスの実行が完了するのを待つことができる。これにより、子プロセスの完了を確実に把握できる。

子プロセスの実行
子プロセスは exec() 関数を実行することで、特定のプログラムをロードして実行する。これにより、子プロセスは新しいプログラムで上書きされる。

子プロセスの終了と親プロセスへの情報の渡し
子プロセスは exit() 関数を実行することで終了する。この際、親プロセスに対して特定の値を渡すことができ、親プロセスはこれを受け取って子プロセスの終了状態を解釈する。

親プロセスと子プロセスは基本的に同時に進行する。fork() 関数を呼び出すと、親プロセスのメモリ空間が子プロセスにコピーされ、2 つのプロセスが同時に実行を開始する。
しかし、どちらのプロセスが先に実行されるか、またはどの程度の速度で実行されるかは OS のスケジューラに依存する。
スケジューラは各プロセスに対して CPU 時間を割り当てる役割を果たし、親プロセスと子プロセスの実行順序や実行速度を制御する。


スレッド（thread）
プロセスは、コンピュータ上で動作するプログラムのインスタンスで、生成時に独立のメモリ空間が割り当てらる。
一方、スレッドは、親プロセスと同じメモリ空間を共有し、同じプロセス内で複数のタスクを並行に処理するための軽量な実行単位。
https://gyazo.com/b546f5bb7d5f9cc243c102791ef1240b

スレッドは、以下の要素から構成されます。

スレッド ID
スレッド ID は、各スレッドの一意の識別子で、オペレーティングシステムやアプリケーションが特定のスレッドを識別するために使用する。
多くのスレッドが同時に実行される場合、各スレッドを個別に制御するためには一意の識別子が必要。

プログラムカウンタ
プログラムカウンタは、次に実行される命令のアドレスを保持する。
スレッドが実行を一時停止し、後で再開する際、どこから処理を再開するべきかを知る必要があるため、この情報が必要。

レジスタセット
レジスタセットは、スレッドが使用する CPU のレジスタの内容を保持する。
レジスタは計算やデータ転送などの基本的な命令の実行に用いられるため、各スレッドがどの段階の計算を行っているのかを記録するためにレジスタセットが必要。

スタック
スタックは、一時的なデータの格納や関数呼び出しの際の戻りアドレスの保存に使用されるメモリ領域。
スレッドが複数の関数を呼び出す際、それぞれの関数の局所変数や戻りアドレスをどこに保存するかを管理する必要があるため、スタックが必要となる。

プロセスは 1 つ以上のスレッドを持ち、各スレッドはプロセスのリソースを共有する。

マルチスレッド
マルチスレッド（multi-thread）は、1 つのプロセス内で複数のスレッドを持つことを指す。
マルチスレッドの利点は、CPU のプロセッサを並列で使用できるため、計算処理中でも他の操作を行うことが可能になる点。
親プロセスのメモリ空間を共有しているため、プロセス間通知や共有メモリの設定なしにデータの共有も可能。

一方で、プロセスのメモリ割り当ては OS が行いメモリの保護を行いますが、マルチスレッドはメモリを共有し、
OS がメモリ管理を行うわけではないので、互いに処理待ちを行い先に進めなくなってしまう、デッドロックなどを防ぐよう注意する必要がある。

マルチプロセス、マルチスレッドには、並行処理、並列処理といった概念がある。例えば、以下のようなプロセスを考えてみる。
プロセス 0, 1 が完了しないとプロセス 2 の処理に取り掛かれない。
https://gyazo.com/3ac8ecf736fc154b5084b89c5ff1f767


並行処理
一つのプロセッサで複数のタスク（プロセス）を一度に処理する技術。以下のように、順番に素早く切り替えることで、複数のタスクが同時に実行されているように見せることが可能。
これを並行処理（concurrent processing）と呼ぶ。
https://gyazo.com/d541685a04714c896c084f5bf43927a5


並列処理（parallel processing）
複数のコアを持つプロセッサ（マルチコアプロセッサ）で、同時に複数の処理を行う技術。これにより、同じタスクを分割して複数のコアで同時に処理することで、全体の実行時間を大幅に短縮することができる。
並列処理は parallel とも呼ばれる。
例えば、ある仕事を複数人の作業者が分担して、電話対応、入力作業、来客対応などを同時に行うイメージ。この方法で、タスクが素早く完了する。
このような処理はシングルコアプロセッサでは実現不可能で、マルチコアプロセッサの能力を活かした最適化が求められる。
https://gyazo.com/264c4899b63ebf7eb0b830ff96998593


リソース管理

プロセス管理
プロセスを実行するために、CPU、メモリ、I/O デバイスなど多くのリソースを必要とする。これらのリソースは有限であり、同時に複数のプロセスが実行される環境では、リソースの競合や不足が生じる可能性がある。
このため、OS は、これらのリソースを効率的に分配し、プロセスの実行を滑らかに管理する必要がある。
具体的には、OS はプロセスをスケジューリングし、それぞれのプロセスに優先度を割り当てることで、リソースのアクセスを調整する。
また、一時的にプロセスを停止したり再開したりする機能や、プロセス間でデータの通信をサポートする役割も持っている。

メモリ管理
メインメモリは、CPU が直接参照できる高速な記憶領域であり、OS はこのメインメモリの管理を行う。
OS は、メモリの各部分がどのプロセスによって利用されているかの監視、メモリ領域の確保・解放、どのデータやプロセスがメモリ上にロードまたはアンロードされるかの判断など、様々な役割を果たしている。
特に、プロセスだけでなく、カーネル自身もメモリを使用します。また、UNIX 系の OS では仮想メモリの技術を使用し、アプリケーションには物理的なメモリよりも大きなメモリ空間を提供している。

コンピュータのメインメモリの更新速度は、CPU のクロック速度よりも遅いため、メモリへのアクセス速度がシステム全体の処理能力のボトルネックになることがある。
この問題を解決するために、キャッシュという高速なメモリの一部を使用してメインメモリと CPU の間の速度差を埋めている。
このキャッシュは通常、CPU 内にハードウェアとして実装されているため、OS の直接制御下にはない。

データは元々メインメモリに保存されるが、プロセッサがそれを使用する際にはキャッシュにコピーされる。
同じデータに再度アクセスする必要がある場合、キャッシュから直接読み込むことで、アクセス速度の高速化を実現している。しかし、キャッシュは容量が小さいため、どのデータを保持し、どのデータを置き換えるかという管理が非常に重要。

マルチプロセッサのシステムでは、各 CPU に独自のローカルキャッシュが存在する場合が多い。
これにより、各ローカルキャッシュに同じデータのコピーが存在する可能性があり、データが更新されるたびに他のローカルキャッシュ内のデータも同期的に更新される必要がある。
この状況はキャッシュコヒーレンシ（cache coherency）として知られ、データの整合性を保つためのハードウェア側の重要な課題となっている。
キャッシュコヒーレンシの不整合が起きると、古いデータが利用されることもあるため、正確な同期と管理が必要。


