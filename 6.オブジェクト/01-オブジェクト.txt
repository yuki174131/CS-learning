プリミティブ型とは、原則として他のデータ型から構成されず、それ以上分解できないデータ型で、ブーリアン型や整数型、文字型がこれに相当。
プリミティブ型でデータを表す場合、限界がある。
例えば、犬、机、車のようなものをデータとして表すとき、プリミティブ型では表すことができない。
プリミティブ型ではないものは全てオブジェクトと呼ばれる。

実世界のものには、状態（state）と振る舞い（behavior）という 2 つの特徴がある。
例えば、レースゲームで使用されるゴーカートを考えてみる。
ゴーカートは、カート、タイヤ、グライダーのような状態を持ち、
アイテムを使う、クラクションを鳴らす、ブレーキをかけるなどの振る舞いを示すことができる。
これらの状態は変数に格納され、振る舞いはメソッド（関数）によって定義される。

クラス
現実の世界では、同じ種類のものが多数存在することがよくある。
例えば、ゴーカートレースゲームで車体を選択する場面。
車体を構成する要素であるカート、タイヤ、グライダーの各種データを変更することで、多種多様な車体を表現することができる。
つまり、同じ種類の車体でも、それらの要素を異なる組み合わせで表現することができる。

例えば、
Kart = "Banana Kart"
Tire = "Wood Tires"
Glider = "Ghost Wing"
とすると、Banana Kart という種類のカート、Wood Tire という種類のタイヤ、Ghost Wing というグライダーを持つ車体をデータとして表現することができる。


一方、
Kart = "Yellow Falcon"
Tire = "Touring Tires"
Glider = "Hang Glider"
とすると、Yellow Falcon という種類のカート、Touring Tires という種類のタイヤ、Hang Glider というグライダーを持つ車体をデータとして表現することができる。

このように、1 つ 1 つの車体はオブジェクト指向プログラミングの用語でインスタンス（instance）と呼ばれる。
また、各インスタンスを作成するために必要な情報をまとめたものをクラス（class）と呼ぶ。
クラスは、車体の設計図のようなもので、異なるインスタンスを作成するために必要な共通情報を提供する。

クラスを定義し、状態にさまざまなプリミティブ型のデータを代入することで、異なる車をデータとして表現することができる。
このように、設計図さえ定義すれば、変数を変更するだけで、さまざまなインスタンスを表現することができる。
