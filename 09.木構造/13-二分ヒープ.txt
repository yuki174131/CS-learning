二分ヒープ（binary heap）は特別な種類の完全二分木で、特定のプロパティを満たす木構造。
この二分ヒープの特性は、任意の親ノードの値がその子ノードの値と等しく、またはそれより大きい（または小さい）こと。
これにより、最大ヒープ（親ノードが子ノードよりも値が大きい）または最小ヒープ（親ノードが子ノードよりも値が小さい）が形成される。

二分ヒープには主に 2 つの種類がある。

最大ヒープ：根ノードが最大値となります。全てのノードは、その親ノードよりも小さい（または等しい）値を持つ。
最小ヒープ：根ノードが最小値となります。全てのノードは、その親ノードよりも大きい（または等しい）値を持つ。

また、ヒープは完全二分木であるという性質を持っていて、これは全ての階層が左から右へ順に埋まっている状態を指す。そのため、ヒープは配列としても表現でき、データの追加や削除が高速に行えるのが特徴。


さらに、二分ヒープはその特性上、高性能な優先度付きキューの実装やヒープソートという高速なソートアルゴリズムの基盤として使用されます。優先度付きキューは、データを優先度に応じて取り出すことが可能なデータ構造で、ヒープはその効率的な実装を可能にします。
最後に、二分ヒープは「in-place」ソートを実現する。
これは、ソートを行う際に新たなメモリ領域をほとんど確保することなく、配列内で要素の位置を交換することによりソートを行う手法。
これにより、メモリ使用量を抑えつつ高速にソートを行うことが可能となる。この特性により、ヒープソートは非常に効率的なソートアルゴリズムとされている。

Max-Heapify は、最大ヒープというデータ構造を維持するための重要な関数。
最大ヒープとは、親ノードがその子ノードよりも大きい、あるいは等しいという性質を持つ二分木のことを指す。
Max-Heapify は、あるノードとその子ノードが最大ヒープのルールを守るように、必要に応じてノード間のデータを入れ替える処理を行う。

次のようなステップで進められる。

Max-Heapify は、ある特定のノード（ノード i）を起点に行われます。そのノード i が、自分自身とその子ノードの中で最大の値を持つことを確認する。
もしノード i が最大の値を持っていたら、何もせず終了です。これは最大ヒープのルールを守っているからである。
しかし、もしノード i が子ノードよりも小さい値を持っていたら、そのノード i と、最大の値を持つ子ノードを交換する。この交換のことを「スワップ」と言う。



