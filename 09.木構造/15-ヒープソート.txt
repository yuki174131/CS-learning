ヒープソートと呼ばれるソート（並べ替え）のアルゴリズム。
ヒープソートは、特定の性質を持つ二分ヒープというデータ構造を用いて、データをソートする。

最大ヒープの作成: まず、与えられたデータから最大ヒープを作成する。この段階では、最大値がヒープの根に位置する。例えば、配列 [4, 10, 3, 5, 1] を最大ヒープに変換すると [10, 5, 3, 4, 1] のような形となる。
最大値の取り出しと交換: ヒープから最大値を取り出す。最大値は常に根に位置するため、これを直接取り出すことが可能。そして、この最大値と最後の葉ノード（配列でいうと一番最後の要素）を交換する。
前述の例で言うと、最大値 10 と一番最後の要素 1 を交換して、[1, 5, 3, 4, 10] となる。
最大値の削除: 次に、最大値をヒープから削除する。実際には要素を物理的に削除するわけではなく、ヒープとして考慮する範囲を 1 つ狭めることで実現する。先ほどの例でいうと、最大値の 10 をヒープから取り除いたと考え、
ヒープとしては [1, 5, 3, 4] となる。
ヒープの再構成: ヒープから最大値を削除した結果、ヒープの性質が崩れる可能性がある。そのため、maxHeapify を行い、再び最大ヒープになるように調整する。例えば、先ほどの [1, 5, 3, 4] に対して maxHeapify を行うと、
再び最大値が根に来るように [5, 4, 3, 1] となる。
繰り返し: これらの手順をヒープのサイズが 1 になるまで繰り返す。ヒープのサイズが 1 ということは、ヒープに含まれる要素が 1 つだけという意味で、
それ以上ソートすべき要素がないということを意味する。繰り返しの過程で、最大値がヒープから取り出されて配列の末尾に置かれていくため、配列全体がソートされる。

たとえば、最初の配列が [4, 10, 3, 5, 1] だったとすると、ヒープソートの過程を通じて次のように変化する。

最初の最大ヒープ: [10, 5, 4, 3, 1]
最大値の取り出しと交換、ヒープの再構成後: [5, 4, 3, 1] と 10
最大値の取り出しと交換、ヒープの再構成後: [4, 1, 3] と 5, 10
最大値の取り出しと交換、ヒープの再構成後: [3, 1] と 4, 5, 10
最大値の取り出しと交換、ヒープの再構成後: [1] と 3, 4, 5, 10
最大値の取り出しと交換、ヒープの再構成後: [] と 1, 3, 4, 5, 10
